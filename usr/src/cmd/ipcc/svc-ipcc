#!/bin/ksh
#
# This file and its contents are supplied under the terms of the
# Common Development and Distribution License ("CDDL"), version 1.0.
# You may only use this file in accordance with the terms of version
# 1.0 of the CDDL.
#
# A full copy of the text of the CDDL should have accompanied this
# source. A copy of the CDDL is also available via the Internet at
# http://www.illumos.org/license/CDDL.

#
# Copyright 2023 Oxide Computer Company
#

. /lib/svc/share/smf_include.sh

#
# This service creates a DPIO (Dedicated Purpose I/O) for the SP-to-Host
# interrupt line. It contains hard-coded knowledge of the required parameters
# based on the platform, which will need extending to support future systems.
#
# It may also be possible in the future to create the DPIO from the ipcc kernel
# module, rather than requiring this service.

# GPIO location based on platform
typeset -rA GPIOMAP=(
	[Oxide,Gimlet]=(
		[controller]=zen_gpio0
		[gpio]=AGPIO139
	)
)

if [[ -z "$SMF_FMRI" ]]; then
        echo "this script can only be invoked by smf(7)"
        exit $SMF_EXIT_ERR_NOSMF
fi

smf_is_globalzone || exit $SMF_EXIT_OK

typeset -r GPIOADM=/usr/sbin/gpioadm

typeset -r PLATFORM=$(prtconf /devices)
typeset -r IPCC_CONF="/platform/$(uname -m)/kernel/drv/ipcc.conf"

if [[ -z "${GPIOMAP[$PLATFORM]}" ]]; then
	echo "$SMF_FMRI is not supported for $PLATFORM"
	/usr/sbin/svcadm disable $SMF_FMRI
	# This sleep is here to allow the effect of the 'svcadm disable'
	# to propagate through to the repository in order to work around a race
	# condition where the service may start up again. Once illumos
	# 15320 is resolved, it should be removed in favour of this script
	# exiting with the new $SMF_EXIT_TEMP_DISABLE
	sleep 5 &
	exit $SMF_EXIT_OK
fi

typeset -r CTRL="${GPIOMAP[$PLATFORM][controller]}"
typeset -r GPIO="${GPIOMAP[$PLATFORM][gpio]}"

if [[ -z "$CTRL" || -z "$GPIO" ]]; then
	echo "Could not determine controller/gpio for $PLATFORM"
	exit $SMF_EXIT_ERR_CONFIG
fi

if [[ ! -r "$IPCC_CONF" ]]; then
	echo "ipcc configuration file $IPCC_CONF could not be read."
	exit $SMF_EXIT_ERR_CONFIG
fi

DPIO_NAME=$(awk -F'"' '/^sp-intr-path/ { print $2 }' $IPCC_CONF)
if [[ -z "$DPIO_NAME" ]]; then
	echo "Could not extract the DPIO name from $IPCC_CONF"
	exit $SMF_EXIT_ERR_CONFIG
fi
DPIO_NAME=${DPIO_NAME##*/}

existing=$($GPIOADM dpio list -Hpo controller,gpionum $DPIO_NAME 2>/dev/null)
if (($? == 0)) && [[ -n "$existing" ]]; then
	controller=${existing%:*}
	id=${existing#*:}
	echo "Found existing DPIO $DPIO_NAME at $controller/$id"
	if [[ "$controller" != "$CTRL" ]]; then
		echo "Existing DPIO is on controller $controller and not $CTRL"
		exit $SMF_EXIT_ERR_FATAL
	fi
	echo "Removing DPIO $DPIO_NAME"
	if ! $GPIOADM dpio undefine "$controller/$id"; then
		echo "Could not undefine existing DPIO $DPIO_NAME"
		exit $SMF_EXIT_ERR_FATAL
	fi
fi

case "$1" in
start)
	echo "Creating DPIO $DPIO_NAME over $CTRL/$GPIO"
	$GPIOADM dpio define -K -r "$CTRL/$GPIO" "$DPIO_NAME" || \
	    exit $SMF_EXIT_ERR_FATAL
	;;
stop)
	# Any existing DPIO will have been undefined above.
	;;
*)
	echo "ERROR: $0: unsupported command '$1'" >&2
	exit $SMF_EXIT_ERR_FATAL
	;;
esac

exit $SMF_EXIT_OK
