.\" The contents of this file are subject to the terms of the Common
.\" Development and Distribution License (the "License").  You may not use
.\" this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE or
.\" http://www.opensolaris.org/os/licensing.  See the License for the
.\" specific language governing permissions and limitations under the
.\" License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each file
.\" and include the License file at usr/src/OPENSOLARIS.LICENSE.  If
.\" applicable, add the following below this CDDL HEADER, with the fields
.\" enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" Copyright (c) 2005, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2019, Joyent, Inc. All Rights Reserved.
.\" Copyright (c) 2014, 2017 by Delphix. All rights reserved.
.\" Copyright 2025 Oxide Computer Company
.\"
.Dd March 23, 2025
.Dt MDB 1
.Os
.Sh NAME
.Nm mdb
.Nd modular debugger
.Sh SYNOPSIS
.Nm
.Op Fl fkmuwyAFKMSUW
.Op Cm \(+-o Ar option
.Op Fl b Ar VM
.Op Fl p Ar pid
.Op Fl s Ar distance
.Op Fl I Ar path
.Op Fl L Ar path
.Op Fl P Ar prompt
.Op Fl R Ar root
.Op Fl V Ar dis-version
.Op Fl e Ar expr
.Op Ar object Oo Ar core Oc | Ar core | Ar suffix
.Sh DESCRIPTION
.Ss Introduction
The
.Nm
utility is an extensible utility for low-level debugging and editing of the
live operating system, operating system crash dumps, user processes, user
process core dumps, and object files.
For a more detailed description of
.Nm
features, refer to the
.%T Modular Debugger Guide .
.Pp
Debugging is the process of analyzing the execution and state of a software
program in order to remove defects.
Traditional debugging tools provide facilities for execution control so that
programmers can re-execute programs in a controlled environment and display the
current state of program data or evaluate expressions in the source language
used to develop the program.
.Pp
Unfortunately, these techniques are often inappropriate for debugging complex
software systems such as an operating system, where bugs might not be
reproducible and program state is massive and distributed, for programs that
are highly optimized, have had their debug information removed, or are
themselves low-level debugging tools, or for customer situations where the
developer can only access post-mortem information.
.Pp
.Nm
provides a completely customizable environment for debugging these programs and
scenarios, including a dynamic module facility that programmers can use to
implement their own debugging commands to perform program-specific analysis.
Each
.Nm
module can be used to examine the program in several different contexts,
including live and post-mortem.
.Ss Definitions
The
.Em target
is the program being inspected by the debugger.
.Nm
currently provides support for the following types of targets: user processes,
user process core files, live bhyve VMs, the live operating system
.Po
via
.Pa /dev/kmem
and
.Pa /dev/ksyms
.Pc ,
operating system crash dumps, user process images recorded inside an operating
system crash dump, ELF object files, and raw binary files.
Each target exports a standard set of properties, including one or more address
spaces, one or more symbol tables, a set of load objects, and a set of threads
that can be examined using the debugger commands described below.
.Pp
A debugger command, or
.Sy dcmd
.Pq pronounced dee-command
in
.Nm
terminology, is a routine in the debugger that can access any of the properties
of the current target.
.Nm
parses commands from standard input, and then executes the corresponding dcmds.
Each dcmd can also accept a list of string or numerical arguments, as shown in
the syntax description below.
.Nm
contains a set of built-in dcmds, described below, that are always available.
You can also extend the capabilities of
.Nm
itself by writing your own dcmds, as described in the
.%T Modular Debugger Guide .
.Pp
A
.Sy walker
is a set of routines that describe how to walk, or iterate, through the
elements of a particular program data structure.
A walker encapsulates the data structure's implementation from dcmds and from
.Nm
itself.
You can use walkers interactively, or use them as a primitive to build other
dcmds or walkers.
As with dcmds, you can extend
.Nm
by implementing your own walkers as part of a debugger module.
.Pp
A debugger module, or
.Sy dmod
.Pq pronounced dee-mod ,
is a dynamically loaded library containing a set of dcmds and walkers.
During initialization,
.Nm
attempts to load dmods corresponding to the load objects present in the target.
You can subsequently load or unload dmods at any time while running
.Nm .
.Nm
ships with a set of standard dmods for debugging the kernel.
The
.%T Modular Debugger Guide
contains more information on developing your own debugger modules.
.Pp
A
.Sy macro file
is a text file containing a set of commands to execute.
Macro files are typically used to automate the process of displaying a simple
data structure.
.Nm
provides complete backward compatibility for the execution of macro files
written for
.Xr adb 1 ,
and illumos includes a set of macro files for debugging the kernel that can be
used with either tool.
.Ss Syntax
The debugger processes commands from standard input.
If standard input is a terminal,
.Nm
provides terminal editing capabilities.
.Nm
can also process commands from macro files and from dcmd pipelines, described
below.
The language syntax is designed around the concept of computing the value of an
expression
.Pq typically a memory address in the target ,
and then applying a dcmd to that address.
The current address location is referred to as
.Sy dot ,
and its value is referenced using
.Sq Ic \&. .
.Pp
A
.Em metacharacter
is one of the following characters:
.Pp
.Dl \&[ \&] \&| \&! / \e \&? = > $ \&: \&; NEWLINE SPACE TAB
.Pp
A
.Em blank
is a TAB or a SPACE.
A
.Em word
is a sequence of characters separated by one or more non-quoted metacharacters.
Some of the metacharacters only function as delimiters in certain contexts, as
described below.
An
.Em identifier
is a sequence of letters, digits, underscores, periods, or backquotes beginning
with a letter, underscore, or period.
Identifiers are used as the names of symbols, variables, dcmds, and walkers.
Commands are delimited by a NEWLINE or semicolon
.Pq  \&;  .
.Pp
A
.Em dcmd
is denoted by one of the following words or metacharacters:
.Pp
.Dl / \e \&? = > $character :character ::identifier
.Pp
dcmds named by metacharacters or prefixed by a single $ or : are provided as
built-in operators, and implement complete compatibility with the command set
of the legacy
.Xr adb 1
utility.
Once a dcmd has been parsed, the /, \e, \&?, =, >, $, and : characters are no
longer recognized as metacharacters until the termination of the argument list.
.Pp
A
.Em simple-command
is a dcmd followed by a sequence of zero or more blank-separated words.
The words are passed as arguments to the invoked dcmd, except as specified
under
.Sx Quoting and Arithmetic Expansion
below.
Each dcmd returns an exit status that indicates it was either successful,
failed, or was invoked with invalid arguments.
.Pp
A
.Em pipeline
is a sequence of one or more simple commands separated by |.
Unlike the shell, dcmds in
.Nm
pipelines are not executed as separate processes.
After the pipeline has been parsed, each dcmd is invoked in order from left to
right.
Each dcmd's output is processed and stored as described under
.Sx dcmd Pipelines
below.
Once the left-hand dcmd is complete, its processed output is used as input for
the next dcmd in the pipeline.
If any dcmd does not return a successful exit status, the pipeline is aborted.
.Pp
An
.Em expression
is a sequence of words that is evaluated to compute a 64-bit unsigned integer
value.
The words are evaluated using the rules described under
.Sx Arithmetic Expansion
below.
.Ss Commands
A
.Em command
is one of the following:
.Bl -tag -width Ds
.It Ar pipeline Oo ! Ar word No \&... Oc Op \&;
A simple-command or pipeline can be optionally suffixed with the ! character,
indicating that the debugger should open a
.Xr pipe 2
and send the standard output of the last dcmd in the
.Nm
pipeline to an external process created by executing
.Sq $ Ns Ev SHELL \&-c
followed by the string formed by concatenating the words after the ! character.
For more details, refer to
.Sx Shell Escapes
below.
.It Ar expression pipeline Oo ! Ar word No \&... Oc Op \&;
A simple-command or pipeline can be prefixed with an expression.
Before execution of the pipeline, the value of dot
.Pq the variable denoted by Ic \&.
is set to the value of the expression.
.It Ar expression , Ar expression pipeline Oo ! Ar word No \&... Oc Op \&;
A simple-command or pipeline can be prefixed with two expressions.
The first is evaluated to determine the new value of dot, and the second is
evaluated to determine a repeat count for the first dcmd in the pipeline.
This dcmd is executed
.Em count
times before the next dcmd in the pipeline is executed.
The repeat count only applies to the first dcmd in the pipeline.
.It , Ar expression pipeline Oo ! Ar word No \&... Oc Op \&;
If the initial expression is omitted, dot is not modified but the first dcmd in
the pipeline is repeated according to the value of the expression.
.It Ar expression Oo ! Ar word No \&... Oc Op \&;
A command can consist only of an arithmetic expression.
The expression is evaluated and the dot variable is set to its value, and then
the previous dcmd and arguments are executed using the new value of dot.
.It Ar expression , Ar expression Oo ! Ar word No \&... Oc Op \&;
A command can consist only of a dot expression and repeat count expression.
After dot is set to the value of the first expression, the previous dcmd and
arguments are repeatedly executed the number of times specified by the value of
the second expression.
.It , Ar expression Oo ! Ar word No \&... Oc Op \&;
If the initial expression is omitted, dot is not modified but the previous dcmd
and arguments are repeatedly executed the number of times specified by the
value of the count expression.
.It ! Ar word No \&... Op \&;
If the command begins with the ! character, no dcmds are executed and the
debugger simply executes
.Sq $ Ns Ev SHELL \&-c
followed by the string formed by concatenating the words after the ! character.
.El
.Ss Comments
A word beginning with
.Sq //
causes that word and all the subsequent characters up to a NEWLINE to be
ignored.
.Ss Arithmetic Expansion
Arithmetic expansion is performed when an
.Nm
command is preceded by an optional expression representing a start address, or
a start address and a repeat count.
Arithmetic expansion can also be performed to compute a numerical argument for
a dcmd.
An arithmetic expression can appear in an argument list enclosed in square
brackets preceded by a dollar sign
.Pq $[ expression ] ,
and is replaced by the value of the expression.
.Pp
Expressions can contain any of the following special words:
.Bl -tag -width Ds
.It integer
The specified integer value.
Integer values can be prefixed with
.Sy 0i
or
.Sy 0I
to indicate binary values,
.Sy 0o
or
.Sy 0O
to indicate octal values,
.Sy 0t
or
.Sy 0T
to indicate decimal values, and
.Sy 0x
or
.Sy 0X
to indicate hexadecimal values
.Pq the default .
.It 0[tT][0-9]+.[0-9]+
The specified decimal floating point value, converted to its
.Sy IEEE
double-precision floating point representation.
.It \&' Ns Ar cccccccc Ns \&'
The integer value computed by converting each character to a byte equal to its
ASCII value.
Up to eight characters can be specified in a character constant.
Characters are packed into the integer in reverse order
.Pq right-to-left
beginning at the least significant byte.
.It < Ns Ar identifier
The value of the variable named by
.Ar identifier .
.It Ar identifier
The value of the symbol named by
.Ar identifier .
.It ( Ar expression )
The value of
.Ar expression .
.It \&.
The value of dot.
.It &
The most recent value of dot used to execute a dcmd.
.It +
The value of dot incremented by the current increment.
.It ^
The value of dot decremented by the current increment.
.El
.Pp
The increment is a global variable that stores the total bytes read by the last
formatting dcmd.
For more information on the increment, refer to the discussion of
.Sx Formatting dcmds
below.
.Pp
Unary operators are right associative and have higher precedence than binary
operators.
The unary operators are:
.Bl -tag -width Ds
.It # Ns Ar expression
Logical negation.
.It ~ Ns Ar expression
Bitwise complement.
.It - Ns Ar expression
Integer negation.
.It % Ns Ar expression
The value of a pointer-sized quantity at the object file location corresponding
to virtual address
.Ar expression
in the target's virtual address space.
.It %/[csil]/ Ns Ar expression
The value of a char, short, int, or long-sized quantity at the object file
location corresponding to virtual address
.Ar expression
in the target's virtual address space.
.It %/[1248]/ Ns Ar expression
The value of a one, two, four, or eight-byte quantity at the object file
location corresponding to virtual address
.Ar expression
in the target's virtual address space.
.It * Ns Ar expression
The value of a pointer-sized quantity at virtual address
.Ar expression
in the target's virtual address space.
.It */[csil]/ Ns Ar expression
The value of a char, short, int, or long-sized quantity at virtual address
.Ar expression
in the target's virtual address space.
.It */[1248]/ Ns Ar expression
The value of a one, two, four, or eight-byte quantity at virtual address
.Ar expression
in the target's virtual address space.
.El
.Pp
Binary operators are left associative and have lower precedence than unary
operators.
The binary operators, in order of precedence from highest to lowest, are:
.Bl -tag -width Ds
.It *
Integer multiplication.
.It %
Integer division.
.It #
Left-hand side rounded up to next multiple of right-hand side.
.It +
Integer addition.
.It -
Integer subtraction.
.It <<
Bitwise shift left.
.It >>
Bitwise shift right.
.It ==
Logical equality.
.It !=
Logical inequality.
.It &
Bitwise AND.
.It ^
Bitwise exclusive OR.
.It |
Bitwise inclusive OR.
.El
.Ss Quoting
Each metacharacter described above
.Pq see Sx Syntax
terminates a word unless quoted.
Characters can be quoted
.Po
forcing
.Nm
to interpret each character as itself without any special significance
.Pc
by enclosing them in a pair of single
.Sq \&
or double
.Dq \&
quote marks.
A single quote cannot appear within single quotes.
Inside double quotes,
.Nm
recognizes the C programming language character escape sequences.
.Ss Shell Escapes
The \&! character can be used to create a pipeline between an
.Nm
command and the user's shell.
If the
.Ev SHELL
environment variable is set,
.Nm
forks and execs this program for shell escapes; otherwise
.Pa /bin/sh
is used.
The shell is invoked with the
.Fl c
option followed by a string formed by concatenating the words after the
\&! character.
The \&! character takes precedence over all other metacharacters, except
semicolon
.Pq \&;
and NEWLINE.
Once a shell escape is detected, the remaining characters up to the next
semicolon or NEWLINE are passed as is to the shell.
The output of shell commands can not be piped to
.Nm
dcmds.
Commands executed by a shell escape have their output sent directly to the
terminal, not to
.Nm .
.Ss Variables
A
.Em variable
is a variable name, a corresponding integer value, and a set of attributes.
A variable name is a sequence of letters, digits, underscores, or periods.
A variable can be assigned a value using the > dcmd or ::typeset dcmd, and its
attributes can be manipulated using the ::typeset dcmd.
Each variable's value is represented as a 64-bit unsigned integer.
A variable can have one or more of the following attributes:
.Em read-only
.Pq cannot be modified by the user ,
.Em persistent
.Pq cannot be unset by the user ,
and
.Em tagged
.Pq user-defined indicator .
.Pp
The following variables are defined as persistent:
.Bl -tag -width Ds
.It 0
The most recent value printed using the
.Ic / ,
.Ic \e,
.Ic \&? ,
or
.Ic =
dcmd.
.It 9
The most recent count used with the
.Ic $<
dcmd.
.It b
The virtual address of the base of the data section.
.It d
The size of the data section in bytes.
.It e
The virtual address of the entry point.
.It m
The initial bytes
.Pq magic number
of the target's primary object file, or zero if no object file has been read
yet.
.It t
The size of the text section in bytes.
.It hits
The count of the number of times the matched software event specifier has been
matched.
See
.Sx Event Callbacks ,
below.
.It thread
The thread identifier of the current representative thread.
The value of the identifier depends on the threading model used by the current
target.
See
.Sx Thread Support ,
below.
.El
.Pp
In addition, the
.Nm
kernel and process targets export the current values of the representative
thread's register set as named variables.
The names of these variables depend on the target's platform and instruction
set architecture.
.Ss Symbol Name Resolution
As explained in the
.Sx Syntax
description above, a symbol identifier present in an expression context
evaluates to the value of this symbol.
The value typically denotes the virtual address of the storage associated with
the symbol in the target's virtual address space.
A target can support multiple symbol tables including, but not limited to, a
primary executable symbol table, a primary dynamic symbol table, a run-time
link-editor symbol table, and standard and dynamic symbol tables for each of a
number of load objects
.Po
such as shared libraries in a user process, or kernel modules in the kernel
.Pc .
The target typically searches the primary executable's symbol tables first, and
then one or more of the other symbol tables.
Notice that ELF symbol tables only contain entries for external, global, and
static symbols; automatic symbols do not appear in the symbol tables processed
by
.Nm .
.Pp
Additionally,
.Nm
provides a private user-defined symbol table that is searched prior to any of
the target symbol tables.
The private symbol table is initially empty, and can be manipulated using the
.Ic ::nmadd
and
.Ic ::nmdel
dcmds.
The
.Ic ::nm Fl P
option can be used to display the contents of the private symbol table.
The private symbol table allows the user to create symbol definitions for
program functions or data that were either missing from the original program or
stripped out.
These definitions are then used whenever
.Nm
converts a symbolic name to an address, or an address to the nearest symbol.
.Pp
As targets contain multiple symbol tables, and each symbol table can include
symbols from multiple object files, different symbols with the same name can
exist.
.Nm
uses the backquote
.Pq \&`
character as a symbol name scoping operator to allow the programmer to obtain
the value of the desired symbol in this situation.
The programmer can specify the scope used to resolve a symbol name as either:
.Ar object Ns \&` Ns Ar name ,
or
.Ar file Ns \&` Ns Ar name ,
or
.Ar object Ns \&` Ns file Ns \&` Ns Ar name .
The object identifier refers to the name of a load object.
The file identifier refers to the basename of a source file that has a symbol
of type
.Dv STT_FILE
in the specified object's symbol table.
The object identifier's interpretation depends on the target type.
.Pp
The
.Nm
kernel target expects
.Ar object
to specify the basename of a loaded kernel module.
For example, the symbol name
.Pp
.D1 specfs`_init
.Pp
evaluates to the value of the
.Sq _init
symbol in the
.Sq specfs
kernel module.
.Pp
The
.Nm
process target expects
.Ar object
to specify the name of the executable or of a loaded shared library.
It can take any of the following forms:
.Bl -enum
.It
An exact match
.Pq that is, a full pathname :
.Dq /usr/lib/libc.so.1
.It
An exact basename match:
.Dq libc.so.1
.It
An initial basename match up to a
.Sq \&.
suffix:
.Dq libc.so
or
.Dq libc
.It
The literal string
.Dq a.out
is accepted as an alias for the executable.
.El
.Pp
The process target also accepts any of the four forms described above preceded
by an optional link-map id
.Pq lmid .
The lmid prefix is specified by an initial
.Dq Cm LM
followed by the link-map id in hexadecimal followed by an additional
backquote.
For example, the symbol name
.Pp
.D1 LM0`libc.so.1`_init
.Pp
evaluates to the value of the
.Dq _init
symbol in the libc.so.1 library that is loaded on link-map 0
.Pq LM_ID_BASE .
The link-map specifier can be necessary to resolve symbol naming conflicts in
the event that the same library is loaded on more than one link map.
For more information on link maps, refer to the
.%T Linker and Libraries Guide
and
.Xr dlopen 3C .
Link-map identifiers are displayed when symbols are printed according to the
setting of the
.Dq showlmid
option, as described under
.Sx OPTIONS .
.Pp
In the case of a naming conflict between symbols and hexadecimal integer values,
.Nm
attempts to evaluate an ambiguous token as a symbol first, before evaluating it
as an integer value.
For example, the token
.Dq f
can either refer to the decimal integer value 15 specified in hexadecimal
.Pq the default base ,
or to a global variable named
.Dq f
in the target's symbol table.
If a symbol with an ambiguous name is present, the integer value can be
specified by using an explicit
.Sy 0x
or
.Sy 0X
prefix.
.Ss dcmd and Walker Name Resolution
As described earlier, each
.Nm
dmod provides a set of dcmds and walkers.
dcmds and walkers are tracked in two distinct, global namespaces.
.Nm
also keeps track of a dcmd and walker namespace associated with each dmod.
Identically named dcmds or walkers within a given dmod are not allowed: a dmod
with this type of naming conflict fails to load.
Name conflicts between dcmds or walkers from different dmods are allowed in the
global namespace.
In the case of a conflict, the first dcmd or walker with that particular name
to be loaded is given precedence in the global namespace.
Alternate definitions are kept in a list in load order.
The backquote character
.Pq \&`
can be used in a dcmd or walker name as a scoping operator to select an
alternate definition.
For example, if dmods m1 and m2 each provide a dcmd
.Sq d ,
and
m1 is loaded prior to m2, then:
.Bl -tag -width Ds
.It ::d
Executes m1's definition of
.Sq d .
.It ::m1`d
Executes m1's definition of
.Sq d .
.It ::m2`d
Executes m2's definition of
.Sq d .
.El
.Pp
If module
.Sy m1
were now unloaded, the next dcmd on the global definition list
.Pq m2`d
would be promoted to global visibility.
The current definition of a dcmd or walker can be determined using the
.Ic ::which
dcmd, described below.
The global definition list can be displayed using the
.Ic ::which Fl v
option.
.Ss dcmd Pipelines
dcmds can be composed into a pipeline using the | operator.
The purpose of a pipeline is to pass a list of values, typically virtual
addresses, from one dcmd or walker to another.
Pipeline stages might be used to map a pointer from one type of data structure
to a pointer to a corresponding data structure, to sort a list of addresses, or
to select the addresses of structures with certain properties.
.Pp
.Nm
executes each dcmd in the pipeline in order from left to right.
The leftmost dcmd is executed using the current value of dot, or using the
value specified by an explicit expression at the start of the command.
When a | operator is encountered,
.Nm
creates a pipe
.Pq a shared buffer
between the output of the dcmd to its left and the
.Nm
parser, and an empty list of values.
As the dcmd executes, its standard output is placed in the pipe and then
consumed and evaluated by the parser, as if
.Nm
were reading this data from standard input.
Each line must consist of an arithmetic expression terminated by a NEWLINE
or semicolon
.Pq \&; .
The value of the expression is appended to the list of values associated with
the pipe.
If a syntax error is detected, the pipeline is aborted.
.Pp
When the dcmd to the left of a | operator completes, the list of values
associated with the pipe is then used to invoke the dcmd to the right of the |
operator.
For each value in the list, dot is set to this value and the right-hand dcmd is
executed.
Only the rightmost dcmd in the pipeline has its output printed to standard
output.
If any dcmd in the pipeline produces output to standard error, these messages
are printed directly to standard error and are not processed as part of the
pipeline.
.Ss Signal Handling
The debugger ignores the PIPE and QUIT signals.
The INT signal aborts the command that is currently executing.
The debugger intercepts and provides special handling for the
ILL, TRAP, EMT, FPE, BUS, and SEGV signals.
If any of these signals are generated asynchronously
.Po
that is, delivered from another process using
.Xr kill 2
.Pc ,
.Nm
restores the signal to its default disposition and dumps core.
However, if any of these signals are generated synchronously by the debugger
process itself and a dcmd from an externally loaded dmod is currently
executing, and standard input is a terminal,
.Nm
provides a menu of choices allowing the user to force a core dump, quit without
producing a core dump, stop for attach by a debugger, or attempt to resume.
The resume option aborts all active commands and unloads the dmod whose dcmd was
active at the time the fault occurred.
It can then be subsequently re-loaded by the user.
The resume option provides limited protection against buggy dcmds.
Refer to
.Sx WARNINGS, Use of the Error Recovery Mechanism ,
below for information about the risks associated with the resume option.
.Ss Command Re-entry
The text of the last HISTSIZE
.Pq default 128
commands entered from a terminal device are saved in memory.
The in-line editing facility, described next, provides key mappings for
searching and fetching elements from the history list.
.Ss In-line Editing
If standard input is a terminal device,
.Nm
provides some simple emacs-style facilities for editing the command line.
The search, previous, and next commands in edit mode provide access to the
history list.
Only strings, not patterns, are matched when searching.
In the table below, the notation for control characters is caret
.Pq ^
followed by a character shown in upper case.
The notation for escape sequences is M- followed by a character.
For example, M-f
.Pq pronounced meta-eff
is entered by depressing ESC followed by
.Sq f
or by depressing Meta followed by
.Sq f
on keyboards that support a Meta key.
A command line is committed and executed using RETURN or NEWLINE.
The edit commands are:
.Bl -tag -width Ds
.It ^F
Move cursor forward
.Pq right
one character.
.It M-f
Move cursor forward one word.
.It ^B
Move cursor backward
.Pq left
one character.
.It M-b
Move cursor backward one word.
.It ^A
Move cursor to start of line.
.It ^E
Move cursor to end of line.
.It ^D
Delete current character, if the current line is not empty.
If the current line is empty, ^D denotes EOF and the debugger exits.
.It M-^H
.Pq Meta-backspace
Delete previous word.
.It ^K
Delete from the cursor to the end of the line.
.It ^L
Clear the screen and reprint the current line.
.It ^T
Transpose current character with next character.
.It ^N
Fetch the next command from the history.
Each time ^N is entered, the next command forward in time is retrieved.
.It ^P
Fetch the previous command from the history.
Each time ^P is entered, the next command backward in time is retrieved.
.It ^R Ns Op Ar string
Search backward in the history for a previous command line containing
.Ar string .
The string should be terminated by a RETURN or NEWLINE.
If
.Ar string
is omitted, the previous history element containing the most recent string is
retrieved.
.El
.Pp
The editing mode also interprets the following user-defined sequences as
editing commands.
User defined sequences can be read or modified using the
.Xr stty 1
command.
.Bl -tag -width Ds
.It erase
User defined erase character
.Po
usually ^H or ^?
.Pc .
Delete previous character.
.It intr
User defined interrupt character
.Pq usually ^C .
Abort the current command and print a new prompt.
.It kill
User defined kill character
.Pq usually ^U .
Kill the entire current command line.
.It quit
User defined quit character
.Pq usually ^\e .
Quit the debugger.
.It suspend
User defined suspend character
.Pq usually ^Z .
Suspend the debugger.
.It werase
User defined word erase character
.Pq usually ^W .
Erase the preceding word.
.El
.Pp
On keyboards that support an extended keypad with arrow keys,
.Nm
interprets these keystrokes as editing commands:
.Bl -tag -width Ds
.It up-arrow
Fetch the previous command from the history
.Pq same as ^P .
.It down-arrow
Fetch the next command from the history
.Pq same as ^N .
.It left-arrow
Move cursor backward one character
.Pq same as ^B .
.It right-arrow
Move cursor forward one character
.Pq same as ^F .
.El
.Ss Output Pager
.Nm
provides a built-in output pager.
The output pager is enabled if the debugger's standard output is a terminal
device.
Each time a command is executed,
.Nm
pauses after one screenful of output is produced and displays a pager prompt:
.Pp
>> More [<space>, <cr>, q, n, c, a] ?
.Pp
The following key sequences are recognized by the pager:
.Bl -tag -width Ds
.It Ar SPACE
Display the next screenful of output.
.It a, A
Abort the current top-level command and return to the prompt.
.It c, C
Continue displaying output without pausing at each screenful until the current
top-level command is complete.
.It n, N, Ar NEWLINE , Ar RETURN
Display the next line of output.
.It q, Q, ^C, ^\e
Quit
.Pq abort
the current dcmd only.
.El
.Ss Formatting dcmds
The
.Ic / ,
.Ic \e ,
.Ic \&? ,
and
.Ic =
metacharacters are used to denote the special output formatting dcmds.
Each of these dcmds accepts an argument list consisting of one or more format
characters, repeat counts, or quoted strings.
A format character is one of the ASCII characters shown in the table below.
Format characters are used to read and format data from the target.
A repeat count is a positive integer preceding the format character that is
always interpreted in base 10
.Pq decimal .
A repeat count can also be specified as an expression enclosed in square
brackets preceded by a dollar sign
.Pq $[ \&] .
A string argument must be enclosed in double-quotes
.Pq Dq .
No blanks are necessary between format arguments.
.Pp
The formatting dcmds are:
.Bl -tag -width Ds
.It Ic /
Display data from the target's virtual address space starting at the virtual
address specified by dot.
.It Ic \e
Display data from the target's physical address space starting at the physical
address specified by dot.
.It Ic \&?
Display data from the target's primary object file starting at the object file
location corresponding to the virtual address specified by dot.
.It Ic =
Display the value of dot itself in each of the specified data formats.
The = dcmd is therefore useful for converting between bases and performing
arithmetic.
.El
.Pp
In addition to dot,
.Nm
keeps track of another global value called the
.Em increment .
The increment represents the distance between dot and the address following all
the data read by the last formatting dcmd.
For example, if a formatting dcmd is executed with dot equal to address A, and
displays a 4-byte integer, then after this dcmd completes, dot is still A, but
the increment is set to 4.
The + character
.Po described under
.Sx Arithmetic Expansion
above
.Pc
would now evaluate to the value A + 4, and could be used to reset dot to the
address of the next data object for a subsequent dcmd.
.Pp
Most format characters increase the value of the increment by the number of
bytes corresponding to the size of the data format, shown in the table.
The table of format characters can be displayed from within
.Nm
using the
.Ic ::formats
dcmd.
The format characters are:
.Pp
.Bl -tag -compact -width Ds
.It +
increment dot by the count
.Pq variable size
.It -
decrement dot by the count
.Pq variable size
.It B
hexadecimal int
.Pq 1 byte
.It C
character using C character notation
.Pq 1 byte
.It D
decimal signed int
.Pq 4 bytes
.It E
decimal unsigned long long
.Pq 8 bytes
.It F
double
.Pq 8 bytes
.It G
octal unsigned long long
.Pq 8 bytes
.It H
swap bytes and shorts
.Pq 4 bytes
.It I
address and disassembled instruction
.Pq variable size
.It J
hexadecimal long long
.Pq 8 bytes
.It K
hexadecimal uintptr_t
.Pq 8 bytes
.It L
match int
.Pq 4 bytes
.It M
match long long
.Pq 8 bytes
.It N
newline
.It O
octal unsigned int
.Pq 4 bytes
.It P
symbol
.Pq 8 bytes
.It Q
octal signed int
.Pq 4 bytes
.It R
binary unsigned long long
.Pq 8 bytes
.It S
string using C string notation
.Pq variable size
.It T
horizontal tab
.It U
decimal unsigned int
.Pq 4 bytes
.It V
decimal unsigned int
.Pq 1 byte
.It W
write default radix unsigned int
.Pq 4 bytes
.It X
hexadecimal int
.Pq 4 bytes
.It Y
decoded time32_t
.Pq 4 bytes
.It Z
write hexadecimal long long
.Pq 8 bytes
.It ^
decrement dot by increment * count
.Pq variable size
.It a
dot as symbol+offset
.It b
octal unsigned int
.Pq 1 byte
.It c
character
.Pq 1 byte
.It d
decimal signed short
.Pq 2 bytes
.It e
decimal signed long long
.Pq 8 bytes
.It f
float
.Pq 4 bytes
.It g
octal signed long long
.Pq 8 bytes
.It h
swap bytes
.Pq 2 bytes
.It i
disassembled instruction
.Pq variable size
.It j
jazzed-up binary unsigned long long
.Pq 8 bytes
.It l
match short
.Pq 2 bytes
.It n
newline
.It o
octal unsigned short
.Pq 2 bytes
.It p
symbol
.Pq 8 bytes
.It q
octal signed short
.Pq 2 bytes
.It r
whitespace
.It s
raw string
.Pq variable size
.It t
horizontal tab
.It u
decimal unsigned short
.Pq 2 bytes
.It v
write decimal signed int
.Pq 1 byte
.It w
write default radix unsigned short
.Pq 2 bytes
.It x
hexadecimal short
.Pq 2 bytes
.It y
decoded time64_t
.Pq 8 bytes
.It z
write whose size is inferred by CTF info
.Pq variable size
.El
.Pp
The
.Ic / ,
.Ic \e ,
and
.Ic \&?
formatting dcmds can also be used to write to the target's virtual address
space, physical address space, or object file by specifying one of the
following modifiers as the first format character, and then specifying a list
of words that are either immediate values or expressions enclosed in square
brackets preceded by a dollar sign
.Pq $[ \&] .
.Pp
The write modifiers are:
.Bl -tag -width Ds
.It v
Write the lowest byte of the value of each expression to the target beginning
at the location specified by dot.
.It w
Write the lowest two bytes of the value of each expression to the target
beginning at the location specified by dot.
.It W
Write the lowest 4 bytes of the value of each expression to the target
beginning at the location specified by dot.
.It Z
Write the complete 8 bytes of the value of each expression to the target
beginning at the location specified by dot.
.El
.Pp
The
.Ic / ,
.Ic \e ,
and
.Ic \&?
formatting dcmds can also be used to search for a particular integer value in
the target's virtual address space, physical address space, and object file,
respectively, by specifying one of the following modifiers as the first format
character, and then specifying a value and optional mask.
The value and mask are each specified as either immediate values or expressions
enclosed in square brackets preceded by a dollar sign.
If only a value is specified,
.Nm
reads integers of the appropriate size and stops at the address containing the
matching value.
If a value
.Pq V
and mask
.Pq M
are specified,
.Nm
reads integers of the appropriate size and stops at the address containing a
value
.Pq X
where
.Pq X & M
== V.
At the completion of the dcmd, dot is updated to the address containing the
match.
If no match is found, dot is left at the last address that was read.
.Pp
The search modifiers are:
.Bl -tag -width Ds
.It l
Search for the specified 2-byte value.
.It L
Search for the specified 4-byte value.
.It M
Search for the specified 8-byte value.
.El
.Pp
Notice that for both user and kernel targets, an address space is typically
composed of a set of discontiguous segments.
It is not legal to read from an address that does not have a corresponding
segment.
If a search reaches a segment boundary without finding a match, it aborts when
the read past the end of the segment boundary fails.
.Ss Execution Control
.Nm
provides facilities for controlling and tracing the execution of a live running
program.
Currently, only the user process target provides support for execution control.
.Nm
provides a simple model of execution control:
a target process can be started from within the debugger using
.Ic ::run ,
or
.Nm
can attach to an existing process using
.Ic :A ,
.Ic ::attach ,
or the
.Fl p
command-line option, as described below.
A list of traced software events can be specified by the user.
Each time a traced event occurs in the target process, all threads in the
target stop, the thread that triggered the event is chosen as the
representative thread, and control returns to the debugger.
Once the target program is set running, control can be asynchronously returned
to the debugger by typing the user-defined interrupt character
.Pq typically ^C .
.Pp
A software event is a state transition in the target program that is observed
by the debugger.
For example, the debugger can observe the transition of a program counter
register to a value of interest
.Pq a breakpoint
or the delivery of a particular signal.
.Pp
A software event specifier is a description of a class of software events that
is used by the debugger to instrument the target program in order to observe
these events.
The
.Ic ::events
dcmd is used to list the software event specifiers.
A set of standard properties is associated with each event specifier, as
described under
.Ic ::events ,
below.
.Pp
The debugger can observe a variety of different software events, including
breakpoints, watchpoints, signals, machine faults, and system calls.
New specifiers can be created using
.Ic ::bp ,
.Ic ::fltbp ,
.Ic ::sigbp ,
.Ic ::sysbp ,
or
.Ic ::wp .
Each specifier has an associated callback
.Po
an
.Nm
command string to execute as if it had been typed at the command prompt
.Pc
and a set of properties, as described below.
Any number of specifiers for the same event can be created, each with different
callbacks and properties.
The current list of traced events and the properties of the corresponding event
specifiers can be displayed using the
.Ic ::events
dcmd.
The event specifier properties are defined as part of the description of the
.Ic ::events
and
.Ic ::evset
dcmds, below.
.Pp
The execution control built-in dcmds, described below, are always available,
but issue an error message indicating they are not supported if applied to a
target that does not support execution control.
For more information about the interaction of exec, attach, release, and job
control with debugger execution control, refer to
.Sx NOTES ,
below.
.Ss Event Callbacks
The
.Ic ::evset
dcmd and event tracing dcmds allow you to associate an event callback
.Po
using the
.Fl c
option
.Pc
with each event specifier.
The event callbacks are strings that represent
.Nm
commands to execute when the corresponding event occurs in the target.
These commands are executed as if they had been typed at the command prompt.
Before executing each callback, dot is set to the value of the representative
thread's program counter and the
.Sq hits
variable is set to the number of times this specifier has been matched,
including the current match.
.Pp
If the event callbacks themselves contain one or more commands to continue the
target
.Po for example,
.Ic ::cont
or
.Ic ::step ,
.Pc
these commands do not immediately continue the target and wait for it to stop
again.
Instead, inside of an event callback, the continue dcmds note that a continue
operation is now pending, and then return immediately.
Therefore, if multiple dcmds are included in an event callback, the step or
continue dcmd should be the last command specified.
Following the execution of
.Em all
event callbacks, the target immediately resumes execution if
.Em all
matching event callbacks requested a continue.
If conflicting continue operations are requested, the operation with the
highest precedence determines what type of continue occurs.
The order of precedence from highest to lowest is: step, step-over
.Pq next ,
step-out, continue.
.Ss Thread Support
.Nm
provides facilities to examine the stacks and registers of each thread
associated with the target.
The persistent
.Sq thread
variable contains the current representative thread identifier.
The format of the thread identifier depends on the target.
The
.Ic ::regs
and
.Ic ::fpregs
dcmds can be used to examine the register set of the representative thread, or
of another thread if its register set is currently available.
In addition, the register set of the representative thread is exported as a set
of named variables.
The user can modify the value of one or more registers by applying the
.Ic >
dcmd to the corresponding named variable.
.Pp
The
.Nm
kernel target exports the virtual address of the corresponding internal thread
structure as the identifier for a given thread.
The
.%T Modular Debugger Guide
provides more information on debugging support for threads in the kernel.
The
.Nm
process target provides proper support for examination of multi-threaded user
processes that use the native lwp_* interfaces,
.Pa /usr/lib/libthread.so
or
.Pa /usr/lib/lwp/libthread.so .
When debugging a live user process,
.Nm
detects if a single threaded process
.Xr dlopen 3C Ns s
or
.Xr dlclose 3C Ns s
libthread and automatically adjusts its view of the threading model on-the-fly.
The process target thread identifiers corresponds to either the
.Vt lwpid_t ,
.Vt thread_t ,
or
.Vt pthread_t
of the representative, depending on the threading model used by the application.
.Pp
If
.Nm
is debugging a user process target and the target makes use of
compiler-supported thread-local storage,
.Nm
automatically evaluates symbol names referring to thread-local storage to the
address of the storage corresponding to the current representative thread.
The
.Ic ::tls
built-in dcmd can be used to display the value of the symbol for threads other
than the representative thread.
.Ss Built-in dcmds
.Nm
provides a set of built-in dcmds that are always defined.
Some of these dcmds are only applicable to certain targets: if a dcmd is not
applicable to the current target, it fails and prints a message indicating
.Dq command is not supported by current target .
In many cases,
.Nm
provides a mnemonic equivalent
.Pq Ic ::identifier
for the legacy
.Xr adb 1
dcmd names.
For example,
.Ic ::quit
is provided as the equivalent of
.Ic $q .
Programmers who are experienced with
.Xr adb 1
or who appreciate brevity or arcana can prefer the $ or : forms of the
built-ins.
Programmers who are new to
.Nm
might prefer the more verbose :: form.
The built-ins are shown in alphabetical order.
If a $ or : form has a
.Ic ::identifier
equivalent, it is shown underneath the
::identifier form.
The built-in dcmds are:
.Pp
.Bl -tag -width Ds -compact
.It Ic > Ns Ar variable-name
.It Ic > Ns / Ns Ar modifier Ns / Ns Ar variable-name
Assign the value of dot to the specified named variable.
Some variables are read-only and can not be modified.
If the
.Ic >
is followed by a modifier character surrounded by / /, then the value
is modified as part of the assignment.
The modifier characters are:
.Bl -tag -width Ds
.It c
unsigned char quantity
.Pq 1-byte
.It s
unsigned short quantity
.Pq 2-byte
.It i
unsigned int quantity
.Pq 4-byte
.It l
unsigned long quantity
.Pq 4-byte in 32-bit, 8-byte in 64-bit
.El
.Pp
Notice that these operators do not perform a cast.
Instead, they fetch the specified number of low-order bytes
.Pq on little-endian architectures
or high-order bytes
.Pq big-endian architectures .
Modifiers are provided for backwards compatibility; the
.Nm
.Ic * Ns / Ns Ar modifier Ns /
and
.Ic % Ns / Ns Ar modifier Ns /
syntax should be used instead.
.Pp
.It Ic $< Ar macro-name
Read and execute commands from the specified macro file.
The filename can be given as an absolute or relative path.
If the filename is a simple name
.Po
that is, if it does not contain a
.Sq /
.Pc ,
.Nm
searches for it in the macro file include path.
If another macro file is currently being processed, this file is closed and
replaced with the new file.
.Pp
.It Ic $<< Ar macro-name
Read and execute commands from the specified macro file
.Pq as with Ic $< ,
but do not close the current open macro file.
.Pp
.It Ic $?
Print the process-ID and current signal of the target if it is a user process
or core file, and then print the general register set of the representative
thread.
.Pp
.It Oo Ar address Oc Ic ::stack Oo Fl nstv Oc Op Ar count
.It Oo Ar address Oc Ic $c Oo Fl nstv Oc Op Ar count
.It Oo Ar address Oc Ic $C Oo Fl nstv Oc Op Ar count
Print a C stack backtrace.
If the dcmd is preceded by an explicit
.Ar address ,
a backtrace beginning at this virtual memory address is displayed.
Otherwise the stack of the representative thread is displayed.
If an optional count value is given as an argument, no more than
.Ar count
arguments are displayed for each stack frame in the output.
If a function name is preceded in the output with a tilde
.Pq ~
character, it indicates that the shown symbol is approximate as no symbol could
be found at the exact address; this is common in stacks containing functions
that the compiler knows will never return.
The
.Fl n
option can be used to show the original address.
This dcmd recognizes the following options:
.Bl -tag -width Ds
.It Fl n
Do not resolve addresses to names.
.It Fl s
Shows the difference in stack size between frames in square brackets to the
left of each frame.
.It Fl t
Where type information is available, show the function return type and the type
of each argument.
Some argument types, such as enums, are further decoded when possible.
.It Fl v
Show stack frame pointer information.
This option is enabled by default for the $C variant of this command.
.El
.Pp
In the following example output, the size of each stack frame is shown in the
first column in square brackets, the frame pointer address is in the second
column and the type information is displayed inline with the function name and
arguments.
.Bd -literal -offset 2
> $C -st
       fffffe004121cd10 void swtch+0x17f ()
[  60] fffffe004121cd70 int cv_wait_sig+0x190 (
    (kcondvar_t *)fffffe2db1c002d2,
    (kmutex_t *)fffffe2db1c002d8)
[  50] fffffe004121cdc0 int svc_wait+0xab ((int)1)
[  e0] fffffe004121cea0 int nfssys+0x22d (
    (enum nfssys_op)SVCPOOL_WAIT, (void *)fed21fa4)
.Ed
.Pp
.It Oo Ar base Oc Ic $d
Get or set the default output radix.
If the dcmd is preceded by an explicit expression, the default output radix is
set to the given
.Ar base ;
otherwise the current radix is printed in base 10
.Pq decimal .
The default radix is base 16
.Pq hexadecimal .
.Pp
.It Ic $e
Print a list of all known external
.Pq global
symbols of type object or function, the value of the symbol, and the first 4
.Pq 32-bit Nm
or 8
.Pq 64-bit Nm
bytes stored at this location in the target's virtual address space.
The
.Ic ::nm
dcmd provides more flexible options for displaying symbol tables.
.Pp
.It Ic $P Ar prompt-string
Set the prompt to the specified prompt-string.
The default prompt is
.Sq >\  .
The prompt can also be set using
.Ic ::set Fl P
or the
.Fl P
command-line option.
.Pp
.It Ar distance Ic $s
Get or set the symbol matching
.Ar distance
for address-to-symbol-name conversions.
The symbol matching distance modes are discussed along with the
.Fl s
command-line option under
.Sx OPTIONS .
The symbol matching distance can also be modified using the
.Ic ::set Fl s
option.
If no distance is specified, the current setting is displayed.
.Pp
.It Ic $v
Print a list of the named variables that have non-zero values.
The
.Ic ::vars
dcmd provides other options for listing variables.
.Pp
.It Ar width Ic $w
Set the output page
.Ar width
to the specified value.
Typically, this command is not necessary as
.Nm
queries the terminal for its width and handles resize events.
.Pp
.It Ic $W
Re-open the target for writing, as if
.Nm
had been executed with the
.Fl w
option on the command line.
Write mode can also be enabled with the
.Ic ::set Fl w
option.
.Pp
.It Oo Ar pid Oc Ic ::attach Op Ar core | pid
.It Oo Ar pid Oc Ic :A Op Ar core | pid
If the user process target is active, attach to and debug the specified
.Ar pid
or
.Ar core
file.
The core file pathname should be specified as a string argument.
The process-ID can be specified as the string argument, or as the value of the
expression preceding the dcmd.
Recall that the default base is hexadecimal, so decimal PIDs obtained using
.Xr pgrep 1
or
.Xr ps 1
should be preceded with
.Sq 0t
when specified as expressions.
.Pp
.It Xo
.Op Ar address
.Ic ::bp
.Op Fl dDesT
.Op Fl c Ar cmd
.Op Fl n Ar count
.Ar sym No \&...
.Xc
.It Ar address Ic :b Op Ar cmd No \&...
Set a breakpoint at the specified locations.
The
.Ic ::bp
dcmd sets a breakpoint at each address or symbol specified, including
an optional address specified by an explicit expression preceding the dcmd, and
each string or immediate value following the dcmd.
The arguments can either be symbol names or immediate values denoting a
particular virtual address of interest.
If a symbol name is specified, it can refer to a symbol that cannot yet be
evaluated in the target process.
That is, it can consist of an object name and function name in a load object
that has not yet been opened.
In this case, the breakpoint is deferred and is not active in the target until
an object matching the given name is loaded.
The breakpoint is automatically enabled when the load object is opened.
Breakpoints on symbols defined in a shared library should always be set using a
symbol name and not using an address expression, as the address can refer to
the corresponding Procedure Linkage Table
.Pq PLT
entry instead of the actual symbol definition.
Breakpoints set on PLT entries can be overwritten by the run-time link-editor
when the PLT entry is subsequently resolved to the actual symbol definition.
The
.Fl d ,
.Fl D ,
.Fl e ,
.Fl s ,
.Fl t ,
.Fl T ,
.Fl c ,
and
.Fl n
options have the same meaning as they do for the
.Ic ::evset
dcmd, as described below.
If the
.Ic :b
form of the dcmd is used, a breakpoint is only set at the virtual address
specified by the expression preceding the dcmd.
The arguments following the
.Ic :b
dcmd are concatenated together to form the callback string.
If this string contains meta-characters, it must be quoted.
.Pp
.It Ic ::cat Ar filename
Concatenate and display files.
Each filename can be specified as a relative or absolute pathname.
The file contents are printed to standard output, but are not passed to the
output pager.
This dcmd is intended to be used with the | operator; the programmer can
initiate a pipeline using a list of addresses stored in an external file.
.Pp
.It Ic ::cont Op Ar SIG
.It Ic :c Op Ar SIG
Suspend the debugger, continue the target program, and wait for it to terminate
or stop following a software event of interest.
If the target is already running because the debugger was attached to a running
program with the
.Fl o Cm nostop
option enabled, this dcmd simply waits for the target to terminate or stop
after an event of interest.
If an optional signal name or number
.Pq Xr signal.h 3HEAD
is specified as an argument, the signal is immediately delivered to the target
as part of resuming its execution.
If the
.Dv SIGINT
signal is traced, control can be asynchronously returned to the debugger by
typing the user-defined interrupt character
.Pq usually ^C .
This
.Dv SIGINT
signal is automatically cleared and is not observed by the target the next time
it is continued.
If no target program is currently running,
.Ic ::cont
starts a new program running as if by
.Ic ::run .
.Pp
.It Ar address Ic ::context
.It Ar address Ic $p
Context switch to the specified process.
A context switch operation is only valid when using the kernel target.
The process context is specified using the
.Ar address
of its proc structure in the kernel's virtual address space.
The special context address
.Dq 0
is used to denote the context of the kernel itself.
.Nm
can only perform a context switch when examining a crash dump if the dump
contains the physical memory pages of the specified user process
.Pq as opposed to just kernel pages .
The kernel crash dump facility can be configured to dump all pages or the pages
of the current user process using
.Xr dumpadm 8 .
The
.Ic ::status
dcmd can be used to display the contents of the current crash dump.
.Pp
When the user requests a context switch from the kernel target,
.Nm
constructs a new target representing the specified user process.
Once the switch occurs, the new target interposes its dcmds at the global
level: thus the
.Ic /
dcmd now formats and displays data from the virtual address space of the user
process, the
.Ic ::mappings
dcmd displays the mappings in the address space of the user process, and so on.
The kernel target can be restored by executing
.Ar 0 Ns Ic ::context .
.Pp
.It Ic ::dcmds Op Ar substr
List the available dcmds and print a brief description for each one.
If
.Ar substr
is provided, filter the list to show only those dcmds that contain the
substring in their name or description.
.Pp
.It Oo Ar address Oc Ic ::delete Op Ar id | Cm all
.It Oo Ar address Oc Ic :d Op Ar id | Cm all
Delete the event specifiers with the given id number.
.Ar id
is interpreted in decimal by default.
If an optional address is specified preceding the dcmd, all event specifiers
that are associated with the given virtual address are deleted
.Pq for example, all breakpoints or watchpoints affecting that address .
If the special argument
.Cm all
is given, all event specifiers are deleted, except those that are marked sticky
.Pq T flag .
The
.Ic ::events
dcmd displays the current list of event specifiers.
.Pp
.It Xo
.Op Ar address
.Ic ::dis
.Op Fl fw
.Op Fl n Ar count
.Op address
.Xc
Disassemble starting at or around the
.Ar address
specified by the final argument, or the current value of dot.
If the address matches the start of a known function, the entire function is
disassembled.
Otherwise, a
.Dq window
of instructions before and after the specified address is printed in order to
provide context.
By default, instructions are read from the target's virtual address space.
If the
.Fl f
option is present, instructions are read from the target's object file instead.
The
.Fl f
option is enabled by default if the debugger is not currently attached to a
live process, core file, or crash dump.
The
.Fl w
option can be used to force window mode, even if the address is the start of
a known function.
The size of the window defaults to ten instructions; the number of instructions
can be specified explicitly using the
.Fl n
option.
.Pp
.It Ic ::disasms
List the available disassembler modes.
When a target is initialized,
.Nm
attempts to select the appropriate disassembler mode.
The user can change the mode to any of the modes listed using the
.Ic ::dismode
dcmd.
.Pp
.It Ic ::dismode Op Ar mode
.It Ic $V Op Ar mode
Get or set the disassembler mode.
If no argument is specified, print the current disassembler mode.
If a
.Ar mode
argument is specified, switch the disassembler to the specified mode.
The list of available disassemblers can be displayed using the
.Ic ::disasms
dcmd.
.Pp
.It Ic ::dmods Oo Fl l Oc Op Ar module-name
List the loaded debugger modules.
If the
.Fl l
option is specified, the list of the dcmds and walkers associated with each
dmod is printed below its name.
The output can be restricted to a particular dmod by specifying its name as an
additional argument.
.Pp
.It Xo
.Op Ar address
.Ic ::dump
.Op Fl eqrstu
.Op Fl f | p
.Op Fl g Ar bytes
.Op Fl w Ar paragraphs
.Xc
Print a hexadecimal and ASCII memory dump of the 16-byte aligned region of
memory containing the address specified by dot.
If a repeat count is specified for
.Ic ::dump ,
this is interpreted as a number of bytes to dump rather than a number of
iterations.
The
.Ic ::dump
dcmd also recognizes the following options:
.Bl -tag -width Ds
.It Fl e
Adjusts for endian-ness.
The
.Fl e
option assumes 4-byte words.
The
.Fl g
option can be used to change the default word size.
.It Fl f
Reads data from the object file location corresponding to the given virtual
address instead of from the target's virtual address space.
The
.Fl f
option is enabled by default if the debugger is not currently attached to a
live process, core file, or crash dump.
.It Fl g Ar bytes
Displays bytes in groups of
.Ar bytes .
The default group size is 4 bytes.
The group size must be a power of two that divides the line width.
.It Fl p
Interprets
.Ar address
as a physical address location in the target's address space instead of a
virtual address.
.It Fl q
Does not print an ASCII decoding of the data.
.It Fl r
Numbers lines relative to the start address instead of with the explicit
address of each line.
This option implies the
.Fl u
option.
.It Fl s
Elides repeated lines.
.It Fl t
Only reads from and displays the contents of the specified addresses, instead
of reading and printing entire lines.
.It Fl u
Unaligns output instead of aligning the output at a paragraph boundary.
.It Fl w Ar paragraphs
Displays paragraphs at 16-byte paragraphs per line.
The default number of
.Ar paragraphs
is one.
The maximum value accepted for
.Fl w
is 16.
.El
.Pp
.It Ic ::echo Op Ar string | value
Print the arguments separated by blanks and terminated by a NEWLINE to standard
output.
Expressions enclosed in $[ ] are evaluated to a value and printed in the
default base.
.Pp
.It Ic ::eval Ar command
Evaluate and execute the specified string as a command.
If the command contains metacharacters or whitespace, it should be enclosed in
double or single quotes.
.Pp
.It Ic ::events Op Fl av
.It Ic $b Op Fl av
Display the list of software event specifiers.
Each event specifier is assigned a unique ID number that can be used to delete
or modify it at a later time.
The debugger can also have its own internal events enabled for tracing.
These events are only be displayed if the
.Fl a
option is present.
If the
.Fl v
option is present, a more verbose display, including the reason for any
specifier inactivity, are shown.
Here is some sample output:
.Bd -literal -offset 2
> ::events
   ID S TA HT LM Description           Action
----- - -- -- -- --------------------- ------
[ 1 ] - T   1  0 stop on SIGINT        -
[ 2 ] - T   0  0 stop on SIGQUIT       -
[ 3 ] - T   0  0 stop on SIGILL        -
[ 11] - T   0  0 stop on SIGXCPU       -
[ 12] - T   0  0 stop on SIGXFSZ       -
[ 13] -     2  0 stop at libc`printf   ::echo printf
.Ed
.Pp
The following table explains the meaning of each column.
A summary of this information is available using
.Ic ::help events .
.Bl -tag -width Ds
.It ID
The event specifier identifier.
The identifier is shown in square brackets [ ] if the specifier is enabled, in
parentheses ( ) if the specifier is disabled, or in angle brackets < > if the
target program is currently stopped on an event that matches the given
specifier.
.It S
The event specifier state.
The state is one of the following symbols:
.Bl -tag -width Ds
.It -
The event specifier is idle.
When no target program is running, all specifiers are idle.
When the target program is running, a specifier can be idle if it cannot be
evaluated
.Po
for example, a deferred breakpoint in a shared object that is not yet loaded
.Pc .
.It +
The event specifier is active.
When the target is continued, events of this type is detected by the debugger.
.It *
The event specifier is armed.
This state means that the target is currently running with instrumentation for
this type of event.
This state is only visible if the debugger is attached to a running program
with the
.Fl o Cm nostop
option.
.It !
The event specifier was not armed due to an operating system error.
The
.Ic ::events Fl v
option can be used to display more information about the reason the
instrumentation failed.
.El
.It TA
The Temporary, Sticky, and Automatic event specifier properties.
One or more of the following symbols can be shown:
.Bl -tag -width Ds
.It t
The event specifier is temporary, and is deleted the next time the target
stops, regardless of whether it is matched.
.It T
The event specifier is sticky, and is not be deleted by
.Ic ::delete Cm all
or
.Ic :z .
The specifier can be deleted by explicitly specifying its id number to
.Ic ::delete .
.It d
The event specifier is automatically disabled when the hit count is equal to
the hit limit.
.It D
The event specifier is automatically deleted when the hit count is equal to the
hit limit.
.It s
The target automatically stops when the hit count is equal to the hit limit.
.El
.It HT
The current hit count.
This column displays the number of times the corresponding software event has
occurred in the target since the creation of this event specifier.
.It LM
The current hit limit.
This column displays the limit on the hit count at which the auto-disable,
auto-delete, or auto-stop behavior takes effect.
These behaviors can be configured using the
.Ic ::evset
dcmd, described below.
.It Description
A description of the type of software event that is matched by the given
specifier.
.It Action
The callback string to execute when the corresponding software event occurs.
This callback is executed as if it had been typed at the command prompt.
.El
.Pp
.It Xo
.Op Ar id
.Ic ::evset
.Op Fl dDesT
.Op Fl c Ar cmd
.Op Fl n Ar count
.Ar id No \&...
.Xc
Modify the properties of one or more software event specifiers.
The properties are set for each specifier identified by the optional expression
preceding the dcmd and an optional list of arguments following the dcmd.
The argument list is interpreted as a list of decimal integers, unless an
explicit radix is specified.
The
.Ic ::evset
dcmd recognizes the following options:
.Bl -tag -width Ds
.It Fl d
Disables the event specifier when the hit count reaches the hit limit.
If the
.Fl d
form of the option is given, this behavior is disabled.
Once an event specifier is disabled, the debugger removes any corresponding
instrumentation and ignores the corresponding software events until the
specifier is subsequently re-enabled.
If the
.Fl n
option is not present, the specifier is disabled immediately.
.It Fl D
Deletes the event specifier when the hit count reaches the hit limit.
If the
.Fl D
form of the option is given, this behavior is disabled.
The
.Fl D
option takes precedence over the
.Fl d
option.
The hit limit can be configured using the
.Fl n
option.
.It Fl e
Enables the event specifier.
If the
.Fl e
form of the option is given, the specifier is disabled.
.It Fl s
Stops the target program when the hit count reaches the hit limit.
If the
.Fl s
form of the option is given, this behavior is disabled.
The
.Fl s
behavior tells the debugger to act as if the
.Ic ::cont
were issued following each execution of the specifier's callback, except for
the
.Ar N
th execution, where
.Ar N
is the current value of the specifier's hit limit.
The
.Fl s
option takes precedence over both the
.Fl D
option and the
.Fl d
option.
.It Fl t
Marks the event specifier as temporary.
Temporary specifiers are automatically deleted the next time the target stops,
regardless of whether it stopped as the result of a software event
corresponding to the given specifier.
If the
.Fl t
form of the option is given, the temporary marker is removed.
The
.Fl t
option takes precedence over the
.Fl T
option.
.It Fl T
Marks the event specifier as sticky.
Sticky specifiers are not deleted by
.Ic ::delete Cm all
or
.Ic :z .
They can be deleted by specifying the corresponding specifier ID
as an explicit argument to
.Ic ::delete .
If the
.Fl T
form of the option is given, the sticky property is removed.
The default set of event specifiers are all initially marked sticky.
.It Fl c
Executes the specified
.Ar cmd
string each time the corresponding software event occurs in the target program.
The current callback string can be displayed using
.Ic ::events .
.It Fl n
Sets the current value of the hit limit to
.Ar count .
If no hit limit is currently set and the
.Fl n
option does not accompany
.Fl s
or D, the hit limit is set to one.
A summary of this information is available using
.Ic ::help evset .
.El
.Pp
.It Ic ::files
.It Ic $f
.Pp
Print a list of the known source files
.Po
symbols of type
.Dv STT_FILE
present in the various target symbol tables
.Pc .
.Pp
.It Xo
.Op Ar flt
.Ic ::fltbp
.Op Fl dDestT
.Op Fl c Ar cmd
.Op Fl n Ar count
.Ar flt No \&...
.Xc
Trace the specified machine faults.
The faults are identified using an optional fault number preceding the dcmd, or
a list of fault names or numbers
.Pq see In sys/fault.h
following the dcmd.
The
.Fl d ,
.Fl D ,
.Fl e ,
.Fl s ,
.Fl t ,
.Fl T ,
.Fl c ,
and
.Fl n
options have the same meaning as they do for the
.Ic ::evset
dcmd.
.Pp
.It Oo Ar thread Oc Ic ::fpregs
.It Oo Ar thread Oc Ic $x , $X , $y , $Y
Print the floating-point register set of the representative thread.
If a thread is specified, the floating point registers of that thread are
displayed.
The thread expression should be one of the thread identifiers described under
.Sx Thread Support ,
above.
.Pp
.It Ic ::formats
List the available output format characters for use with the
.Ic / ,
.Ic \e ,
.Ic \&? ,
and
.Ic =
formatting dcmds.
The formats and their use is described under
.Sx Formatting dcmds ,
above.
.Pp
.It Ic ::grep Ar command
Evaluate the specified command string, and then print the old value of dot if
the new value of dot is non-zero.
If the
.Ar command
contains whitespace or metacharacters, it must be quoted.
The
.Ic ::grep
dcmd can be used in pipelines to filter a list of addresses.
.Pp
.It Ic ::help Op Ar dcmd-name
With no arguments, the
.Ic ::help
dcmd prints a brief overview of the help facilities available in
.Nm .
If a dcmd-name is specified,
.Nm
prints a usage summary for that dcmd.
.Pp
.It Ar signal Ic :i
If the target is a live user process, ignore the specified signal and allow it
to be delivered transparently to the target.
All event specifiers that are tracing delivery of the specified signal are
deleted from the list of traced events.
By default, the set of ignored signals is initialized to the complement of the
set of signals that cause a process to dump core by default
.Pq see Xr signal.h 3HEAD ,
except for
.Dv SIGINT ,
which is traced by default.
.Pp
.It Ic $i
Display the list of signals that are ignored by the debugger and that is
handled directly by the target.
More information on traced signals can be obtained using the
.Ic ::events
dcmd.
.Pp
.It Ic ::kill
.It Ic :k
Forcibly terminate the target if it is a live user process.
The target is also forcibly terminated when the debugger exits if it was
created by the debugger using
.Ic ::run .
.Pp
.It Ic $l
Print the LWPID of the representative thread, if the target is a user process.
.Pp
.It Ic $L
Print the LWPIDs of each LWP in the target, if the target is a user process.
.Pp
.It Oo Ar address Oc Ic ::list Ar type member Op Ar variable-name
Walk through the elements of a linked list data structure and print the address
of each element in the list.
The address of the first element in the list can be specified using an optional
address.
Otherwise, the list is assumed to start at the current value of dot.
The type parameter must name a C struct or union type and is used to describe
the type of the list elements so that
.Nm
can read in objects of the appropriate size.
The member parameter is used to name the
.Ar member
of
.Ar type
that contains a pointer to the next list element.
The
.Ic ::list
dcmd continues iterating until a
.Dv NULL
pointer is encountered, the first element is reached again
.Pq a circular list ,
or an error occurs while reading an element.
If the optional variable-name is specified, the specified variable is assigned
the value returned at each step of the walk when
.Nm
invokes the next stage of a pipeline.
The
.Ic ::list
dcmd can only be used with objects that contain symbolic debugging
information designed for use with
.Nm .
Refer to
.Sx NOTES, Symbolic Debugging Information ,
below for more information.
.Pp
.It Ic ::load Oo Fl s Oc Ar module-name
Load the specified dmod.
The module name can be given as an absolute or relative path.
If module-name is a simple name
.Pq that is, does not contain a Sq / ,
.Nm
searches for it in the module library path.
Modules with conflicting names can not be loaded; the existing module must be
unloaded first.
If the
.Fl s
option is present,
.Nm
remains silent and not issue any error messages if the module is not found or
could not be loaded.
.Pp
.It Ic ::log Op Fl d | Oo Fl e Oc Ar filename
.It Ic $> Op Ar filename
Enable or disable the output log.
.Nm
provides an interactive logging facility where both the input commands and
standard output can be logged to a file while still interacting with the user.
The
.Fl e
option enables logging to the specified file, or re-enables logging to the
previous log file if no filename is given.
The
.Fl d
option disables logging.
If the
.Ic $>
dcmd is used, logging is enabled if a filename argument is specified;
otherwise, logging is disabled.
If the specified log file already exists,
.Nm
appends any new log output to the file.
.Pp
.It Ic ::map Ar command
Map the value of dot to a corresponding value using the
.Ar command
specified as a string argument, and then print the new value of dot.
If the command contains whitespace or metacharacters, it must be quoted.
The
.Ic ::map
dcmd can be used in pipelines to transform the list of addresses into a new
list of addresses.
.Pp
.It Oo Ar address Oc Ic ::mappings Op Ar name
.It Oo Ar address Oc Ic $m Op Ar name
Print a list of each mapping in the target's virtual address space, including
the address, size, and description of each mapping.
If the dcmd is preceded by an
.Ar address ,
.Nm
only shows the mapping that contains the given address.
If a string
.Ar name
argument is given,
.Nm
only shows the mapping matching that description.
.Pp
.It Ic ::next Op Ar SIG
.It Ic :e Op Ar SIG
Step the target program one instruction, but step over subroutine calls.
If an optional signal name or number
.Pq see Xr signal.h 3HEAD
is specified as an argument, the signal is immediately delivered to the target
as part of resuming its execution.
If no target program is currently running,
.Ic ::next
starts a new program running as if by
.Ic ::run
and stops at the first instruction.
.Pp
.It Xo
.Op Ar address
.Ic ::nm
.Op Fl DPdghnopuvx
.Op Fl t Ar types
.Op Fl f Ar format
.Op Ar object
.Xc
Print the symbol tables associated with the current target.
If an optional address preceding the dcmd is specified, only the symbol table
entry for the symbol corresponding to
.Ar address
is displayed.
If an
.Ar object
is specified, only the symbol table for this load object is displayed.
The
.Ic ::nm
dcmd also recognizes the following options:
.Bl -tag -width Ds
.It Fl D
Prints .dynsym
.Pq dynamic symbol table
instead of .symtab
.It Fl P
Prints the private symbol table instead of .symtab
.It Fl d
Prints value and size fields in decimal.
.It Fl g
Prints only global symbols.
.It Fl h
Suppresses the header line.
.It Fl n
Sorts symbols by name.
.It Fl o
Prints value and size fields in octal.
.It Fl p
Prints symbols as a series of
.Ic ::nmadd
commands.
This option can be used with
.Fl P
to produce a macro file that can be subsequently read into the debugger with
.Ic $< .
.It Fl u
Prints only undefined symbols.
.It Fl v
Sorts symbols by value.
.It Fl x
Prints value and size fields in hexadecimal.
.It Fl t Ar type Ns Op , Ns Ar type No \&...
Prints only symbols of the specified type(s).
The valid
.Ar type
argument strings are:
.Bl -tag -width Ds
.It noty
.Dv STT_NOTYPE
.It objt
.Dv STT_OBJECT
.It func
.Dv STT_FUNC
.It sect
.Dv STT_SECTION
.It file
.Dv STT_FILE
.It comm
.Dv STT_COMMON
.It tls
.Dv STT_TLS
.It regi
.Dv STT_SPARC_REGISTER
.El
.It Fl t Ar format Ns Op , Ns Ar format No \&...
Prints only the specified symbol information.
The valid
.Ar format
argument strings are:
.Bl -tag -width Ds
.It ndx
symbol table index
.It val
symbol value
.It size
size in bytes
.It type
symbol type
.It bind
binding
.It oth
other
.It shndx
section index
.It name
symbol name
.It ctype
C type for symbol
.Pq if known
.It obj
object which defines symbol
.El
.El
.Pp
.It Xo
.Ar value
.Ic ::nmadd
.Op Fl fo
.Op Fl e Ar end
.Op Fl s Ar size
.Ar name
.Xc
Add the specified symbol
.Ar name
to the private symbol table.
.Nm
provides a private, configurable symbol table that can be used to interpose on
the target's symbol table, as described under
.Sx Symbol Name Resolution
above.
The
.Ic ::nmadd
dcmd also recognizes the following options:
.Bl -tag -width Ds
.It Fl e
Sets the size of the symbol to
.Ar end
-
.Ar value .
.It Fl f
Sets the type of the symbol to
.Dv STT_FUNC .
.It Fl o
Sets the type of the symbol to
.Dv STT_OBJECT .
.It Fl s
Sets the size of the symbol to
.Ar size .
.El
.Pp
.It Ic ::nmdel Ar name
Delete the specified symbol
.Ar name
from the private symbol table.
.Pp
.It Ic ::objects Op Fl v
Print a map of the target's virtual address space, showing only those mappings
that correspond to the primary mapping
.Pq usually the text section
of each of the known load objects.
The
.Fl v
option displays the version of each load object.
Version information is not available for all load objects.
Load objects without version information is listed as having a version of
.Dq Unknown
in the output for the
.Fl v
option.
.Pp
.It Ic ::offsetof Ar type member
Print the offset of the specified
.Ar member
of the specified
.Ar type .
The
.Ar type
should be the name of a C structure.
The offset is printed in bytes, unless the member is a bit-field, in which case
the offset can be printed in bits.
The output is always suffixed with the appropriate units for clarity.
The type name can use the backquote
.Pq `
scoping operator described under
.Sx Symbol Name Resolution ,
above.
The
.Ic ::offsetof
dcmd can only be used with objects that contain symbolic debugging information
designed for use with
.Nm .
Refer to
.Sx NOTES, Symbolic Debugging Information ,
below for more information.
.Pp
.It Xo
.Ar address
.Ic ::print
.Op Fl aCdiLptx
.Op Fl c Ar lim
.Op Fl l Ar lim
.Op Ar type Op Ar member No \&...
.Xc
Print the data structure at the specified virtual
.Ar address
using the given
.Ar type
information.
The
.Ar type
parameter can name a C struct, union, enum, fundamental integer type, or a
pointer to any of these types.
If the type name contains whitespace
.Pq for example, Dq struct foo ,
it must be enclosed in single or double quotes.
The type name can use the backquote
.Pq `
scoping operator described under
.Sx Symbol Name Resolution ,
above.
If the type is a structured type, the
.Ic ::print
dcmd recursively prints each member of the struct or union.
If the
.Ar type
argument is not present and a static or global
.Dv STT_OBJECT
symbol matches the address,
.Ic ::print
infers the appropriate type automatically.
If the
.Ar type
argument is specified, it can be followed by an optional list of
.Ar member
expressions, in which case only those members and submembers of the specified
.Ar type
are displayed.
If
.Ar type
contains other structured types, each member string can refer to a
sub-structure element by forming a list of member names separated by period
.Pq Sq \&.
delimiters.
The
.Ic ::print
dcmd can only be used with objects that contain symbolic debugging information
designed for use with
.Nm .
Refer to
.Sx NOTES, Symbolic Debugging Information ,
below for more information.
After displaying the data structure,
.Ic ::print
increments dot by the size of
.Ar type
in bytes.
The
.Ic ::print
dcmd also recognizes the following options:
.Pp
.Bl -tag -width Ds -compact
.It Fl a
the address of each member is displayed
.Pp
.It Fl p
.Ar address
is interpreted as a physical memory address instead of a virtual memory address.
.Pp
.It Fl t
the type of each member is displayed.
.Pp
.It Fl d
.It Fl x
All integers are displayed in decimal
.Pq Fl d
or hexadecimal
.Pq Fl x .
By default, a heuristic is used to determine if the value should be displayed
in decimal or hexadecimal.
.Pp
.It Fl c Ar lim
.It Fl C
Limit the number of characters in a character array that are read and displayed
to
.Ar lim .
The number of characters in a character array that is read and displayed as a
string can be limited with the
.Fl c
option.
If the
.Fl C
option is present, no limit is enforced.
The default value for
.Fl c
can be modified using
.Ic ::set
or the
.Fl o
command-line option as described under
.Sx OPTIONS .
.Pp
.It Fl l Ar lim
.It Fl L
Limit the number of elements in a standard array that are read and displayed to
.Ar lim .
If the
.Fl L
option is present, no limit is enforced and all array elements are shown.
The default value for
.Fl l
can be modified using
.Ic ::set
or the
.Fl o
command-line option as described under
.Sx OPTIONS .
.Pp
.It Fl i
Address is interpreted as an immediate value to be printed.
You must give a type with which to interpret the value.
If the type is smaller than 64 bits, the immediate value is interpreted as if
it were the size of the type.
The
.Fl i
option cannot be used in conjunction with the
.Fl p
option.
If the
.Fl a
option is also given, the addresses shown are byte offsets starting at zero.
.El
.Pp
.It Ic ::quit
.It Ic $q
Quit the debugger.
.Pp
.It Oo Ar thread Oc Ic ::regs
.It Oo Ar thread Oc Ic $r
Print the general purpose register set of the representative thread.
If a thread is specified, the general purpose register set of that thread is
displayed.
The thread expression should be one of the thread identifiers described under
.Sx Thread Support ,
above.
.Pp
.It Ic ::release Op Fl a
.It Ic :R Op Fl a
Release the previously attached process or core file.
If the
.Fl a
option is present, the process is released and left stopped and abandoned.
It can subsequently be continued by
.Xr prun 1
or it can be resumed by applying
.Nm
or another debugger.
By default, a released process is forcibly terminated if it was created by
.Nm
using
.Ic ::run ,
or it is released and set running if it was attached to by
.Nm
using the
.Fl p
option or using the
.Ic ::attach
or
.Ic :A
dcmds.
.Pp
.It Ic ::run Op Ar args No \&...
.It Ic :r Op Ar args No \&...
Start a new target program running with the specified arguments and attach to
it.
The arguments are not interpreted by the shell.
If the debugger is already examining a live running program, it first detaches
from this program as if by
.Ic ::release .
.Pp
.It Xo
.Ic ::set
.Op Fl wF
.Op Cm \(+-o Ar option
.Op Fl s Ar distance
.Op Fl I Ar path
.Op Fl L Ar path
.Op Fl P Ar prompt
.Xc
Get or set miscellaneous debugger properties.
If no options are specified, the current set of debugger properties is
displayed.
The
.Ic ::set
dcmd recognizes the following options:
.Bl -tag -width Ds
.It Fl F
Forcibly takes over the next user process that
.Ic ::attach
is applied to, as if
.Nm
had been executed with the
.Fl F
option on the command line.
.It Fl I
Sets the default path for locating macro files.
The path argument can contain any of the special tokens described for the
.Fl I
command-line option under
.Sx OPTIONS .
.It Fl L
Sets the default path for locating debugger modules.
The path argument can contain any of the special tokens described for the
.Fl I
command-line option under
.Sx OPTIONS .
.It Fl o
Enables the specified debugger option.
If the
.Fl o
form is used, the option is disabled.
The option strings are described along with the
.Fl o
command-line option under
.Sx OPTIONS .
.It Fl P
Sets the command prompt to the specified prompt string.
.It Fl s
Sets the symbol matching distance to the specified distance.
Refer to the description of the
.Fl s
command-line option under
.Sx OPTIONS
for more information.
.It Fl w
Re-opens the target for writing, as if
.Nm
had been executed with the
.Fl w
option on the command line.
.El
.Pp
.It Ic ::showrev Op Fl pv
Display revision information for the hardware and software.
With no options specified, general system information is displayed.
The
.Fl v
option displays version information for all load objects, whereas the
.Fl p
option displays the version information only for the load objects that have
been installed on the system as part of a patch.
Version information is not available for all load objects.
Load objects without version information is omitted from the output for the
.Fl p
option and is listed as having a version of
.Dq Unknown
in the output for the
.Fl v
option.
.Pp
.It Xo
.Op Ar signal
.Ic ::sigbp
.Op Fl dDestT
.Op Fl c Ar cmd
.Op Fl n Ar count
.Ar SIG No \&...
.Xc
.It Xo
.Op Ar signal
.Ic :t
.Op Fl dDestT
.Op Fl c Ar cmd
.Op Fl n Ar count
.Ar SIG No \&...
.Xc
Trace delivery of the specified signals.
The signals are identified using an optional signal number preceding the dcmd,
or a list of signal names or numbers
.Pq see Xr signal.h 3HEAD
following the dcmd.
The
.Fl d ,
.Fl D ,
.Fl e ,
.Fl s ,
.Fl t ,
.Fl T ,
.Fl c ,
and
.Fl n
options have the same meaning as they do for the
.Ic ::evset
dcmd.
Initially, the set of signals that cause the process to dump core by default
.Pq see Xr signal.h 3HEAD
and
.Dv SIGINT
are traced.
.Pp
.It Ic ::sizeof Ar type
Print the size of the specified
.Ar type
in bytes.
The
.Ar type
parameter can name a C struct, union, enum, fundamental integer type, or a
pointer to any of these types.
The type name can use the backquote
.Pq `
scoping operator described under
.Sx Symbol Name Resolution ,
above.
The
.Ic ::sizeof
dcmd can only be used with objects that contain symbolic debugging information
designed for use with
.Nm .
Refer to
.Sx NOTES, Symbolic Debugging Information ,
below for more information.
.Pp
.It Ic ::status
Print a summary of information related to the current target.
.Pp
.It Ic ::step Op Cm over | out | Ar SIG
.It Ic :s Op Ar SIG
.It Ic :u Op Ar SIG
Step the target program one instruction.
If an optional signal name or number
.Pq see Xr signal.h 3HEAD
is specified as an argument, the signal is immediately delivered to the target
as part of resuming its execution.
If the optional
.Cm over
argument is specified,
.Ic ::step
steps over subroutine calls.
The
.Ic ::step Cm over
argument is the same as the
.Ic ::next
dcmd.
If the optional
.Cm out
argument is specified, the target program continues until the representative
thread returns from the current function.
If no target program is currently running,
.Ic ::step Cm out
starts a new program running as if by
.Ic ::run
and stops at the first instruction.
The
.Ic :s
dcmd is the same as
.Ic ::step .
The
.Ic :u
dcmd is the same as
.Ic ::step Cm out .
.Pp
.It Xo
.Op Ar syscall
.Ic ::sysbp
.Op Fl dDestT
.Op Fl io
.Op Fl c Ar cmd
.Op Fl n Ar count
.Ar syscall No \&...
.Xc
Trace entry to or exit from the specified system calls.
The system calls are identified using an optional system call number preceding
the dcmd, or a list of system call names or numbers
.Pq see In sys/syscall.h
following the dcmd.
If the
.Fl i
option is specified
.Pq the default ,
the event specifiers trigger on entry into the kernel for each system call.
If the
.Fl o
option is specified, the event specifiers trigger on exit out from the kernel.
The
.Fl d ,
.Fl D ,
.Fl e ,
.Fl s ,
.Fl t ,
.Fl T ,
.Fl c ,
and
.Fl n
options have the same meaning as they do for the
.Ic ::evset
dcmd.
.Pp
.It Ar thread Ic ::tls Ar symbol
Print the address of the storage for the specified thread-local storage
.Pq TLS
symbol in the context of the specified thread.
The thread expression should be one of the thread identifiers described under
Thread Support, above.
The symbol name can use any of the scoping operators described under
.Sx Symbol Name Resolution ,
above.
.Pp
.It Ic ::typeset Oo Cm \(+-t Oc Ar variable-name No \&...
Set attributes for named variables.
If one or more variable names are specified, they are defined and set to the
value of dot.
If the
.Fl t
option is present, the user-defined tag associated with each variable is set.
If the
.Sy +t
option is present, the tag is cleared.
If no variable names are specified, the list of variables and their values is
printed.
.Pp
.It Ic ::unload Ar module-name
Unload the specified dmod.
The list of active dmods can be printed using the
.Ic ::dmods
dcmd.
Built-in modules can not be unloaded.
Modules that are busy
.Pq that is, provide dcmds that are currently executing
can not be unloaded.
.Pp
.It Ic ::unset Ar variable-name \&...
Unset
.Pq remove
the specified variable(s)
from the list of defined variables.
Some variables exported by
.Nm
are marked as persistent, and can not be unset by the user.
.Pp
.It Ic ::vars Op Fl npt
Print a listing of named variables.
If the
.Fl n
option is present, the output is restricted to variables that currently have
non-zero values.
If the
.Fl p
option is present, the variables are printed in a form suitable for
re-processing by the debugger using the
.Ic $<
dcmd.
This option can be used to record the variables to a macro file and then
restore these values later.
If the
.Fl t
option is present, only the tagged variables are printed.
Variables can be tagged using the
.Fl t
option of the
.Ic ::typeset
dcmd.
.Pp
.It Ic ::version
Print the debugger version number.
.Pp
.It Ar address Ic ::vtop Op Fl a Ar as
Print the physical address mapping for the specified virtual address, if
possible.
The
.Ic ::vtop
dcmd is only available when examining a kernel target, or when examining a user
process inside a kernel crash dump
.Po after a
.Ic ::context
dcmd has been issued
.Pc .
.Pp
When examining a kernel target from the kernel context, the
.Fl a
option can be used to specify the address
.Pq Ar as
of an alternate address space structure that should be used for the virtual to
physical translation.
By default, the kernel's address space is used for translation.
This option is available for active address spaces even when the dump content
only contains kernel pages.
.Pp
.It Oo Ar address Oc Ic ::walk Ar walker-name Op Ar variable-name
Walk through the elements of a data structure using the specified walker.
The available walkers can be listed using the
.Ic ::walkers
dcmd.
Some walkers operate on a global data structure and do not require a starting
address.
For example, walk the list of proc structures in the kernel.
Other walkers operate on a specific data structure whose address must be
specified explicitly.
For example, given a pointer to an address space, walk the list of segments.
When used interactively, the
.Ic ::walk
dcmd prints the address of each element of the data structure in the default
base.
The dcmd can also be used to provide a list of addresses for a pipeline.
The walker name can use the backquote
.Pq `
scoping operator described under
.Sx dcmd and Walker Name Resolution ,
above.
If the optional variable-name is specified, the specified variable is assigned
the value returned at each step of the walk when
.Nm
invokes the next stage of the pipeline.
.Pp
.It Ic ::walkers Op Ar substr
List the available walkers and print a brief description for each one.
If
.Ar substr
is provided, filter the list to show only those dcmds that contain the
substring in their name or description.
.Pp
.It Ic ::whence Oo Fl v Oc Ar name No \&...
.It Ic ::which Oo Fl v Oc Ar name No \&...
Print the dmod that exports the specified dcmds and walkers.
These dcmds can be used to determine which dmod is currently providing the
global definition of the given dcmd or walker.
Refer to the section on
.Sx dcmd and Walker Name Resolution
above for more information on global name resolution.
The
.Fl v
option causes the dcmd to print the alternate definitions of each dcmd and
walker in order of precedence.
.Pp
.It Xo
.Ar addr Ns Op , Ns Ar len Ns
.Ic ::wp
.Op Fl dDestT
.Op Fl rwx
.Op Fl c Ar cmd
.Op Fl n Ar count
.Xc
.It Ar addr Ns Oo , Ns Ar len Oc Ns Ic :a Op Ar cmd No \&...
.It Ar addr Ns Oo , Ns Ar len Oc Ns Ic :p Op Ar cmd No \&...
.It Ar addr Ns Oo , Ns Ar len Oc Ns Ic :w Op Ar cmd No \&...
Set a watchpoint at the specified address.
The length in bytes of the watched region can be set by specifying an optional
repeat count preceding the dcmd.
If no length is explicitly set, the default is one byte.
The
.Ic ::wp
dcmd allows the watchpoint to be configured to trigger on any combination of
read
.Po
.Fl r
option
.Pc ,
write
.Po
.Fl w
option
.Pc ,
or execute
.Po
.Fl x
option
.Pc
access.
The
.Fl d ,
.Fl D ,
.Fl e ,
.Fl s ,
.Fl t ,
.Fl T ,
.Fl c ,
and
.Fl n
options have the same meaning as they do for the
.Ic ::evset
dcmd.
The
.Ic :a
dcmd sets a read access watchpoint at the specified address.
The
.Ic :p
dcmd sets an execute access watchpoint at the specified address.
The
.Ic :w
dcmd sets a write access watchpoint at the specified address.
The arguments following the
.Ic :a ,
.Ic :p ,
and
.Ic :w
dcmds are concatenated together to form the callback string.
If this string contains meta-characters, it must be quoted.
.Pp
.It Ic ::xdata
List the external data buffers exported by the current target.
External data buffers represent information associated with the target that can
not be accessed through standard target facilities
.Pq that is, an address space, symbol table, or register set .
These buffers can be consumed by dcmds; for more information, refer to the
.%T Modular Debugger Guide .
.Pp
.It Ic :z
Delete all event specifiers from the list of traced software events.
Event specifiers can also be deleted using
.Ic ::delete .
.El
.Sh OPTIONS
The following options are supported:
.Bl -tag -width Ds
.It Fl A
Disables automatic loading of
.Nm
modules.
By default,
.Nm
attempts to load debugger modules corresponding to the active shared libraries
in a user process or core file, or to the loaded kernel modules in the live
operating system or an operating system crash dump.
.It Fl b Ar VM
Attaches to and stops the specified bhyve VM.
.It Fl e Ar expr
Causes
.Nm
to ignore standard input and instead evaluate the
.Nm
expression
.Ar expr .
Upon completing evaluation,
.Nm
terminates and returns a status code.
A non-zero return code from
.Nm
indicates that either
.Nm
or the evaluation of
.Ar expr
failed.
.It Fl f
Forces raw file debugging mode.
By default,
.Nm
attempts to infer whether the object and core file operands refer to a user
executable and core dump or to a pair of operating system crash dump files.
If the file type cannot be inferred, the debugger defaults to examining the
files as plain binary data.
The
.Fl f
option forces
.Nm
to interpret the arguments as a set of raw files to examine.
.It Fl F
Forcibly takes over the specified user process, if necessary.
By default,
.Nm
refuses to attach to a user process that is already under the control of
another debugging tool, such as
.Xr truss 1 .
With the
.Fl F
option,
.Nm
attaches to these processes anyway.
This can produce unexpected interactions between
.Nm
and the other tools attempting to control the process.
.It Fl I Ar path
Sets default path for locating macro files.
Macro files are read using the
.Ic $<
or
.Ic $<<
dcmds.
The path is a sequence of directory names delimited by colon
.Pq \&:
characters.
The
.Fl I
path and
.Fl L
path
.Pq see below
can also contain any of the following tokens:
.Bl -tag -width Ds
.It %i
Expands to the current instruction set architecture
.Pq ISA
name
.Pq e.g sparc or i386 .
.It %o
Expands to the old value of the path being modified.
This is useful for appending or prepending directories to an existing path.
.It %p
Expands to the current platform string
.Po
either that of the running system or the platform string stored in the process
core file or crash dump
.Pc .
.It %r
Expands to the pathname of the root directory.
An alternate root directory can be specified using the
.Fl R
option.
If no
.Fl R
option is present, the root directory is derived dynamically from the path to
the
.Nm
executable itself.
For example, if
.Pa /bin/mdb
is executed, the root directory is
.Pa / .
If
.Pa /net/hostname/bin/mdb
were executed, the root directory would be derived as
.Pa /net/hostname .
.It %t
Expands to the name of the current target.
This is either the literal string
.Sq proc
.Pq a user process or user process core file ,
.Sq kvm
.Pq a kernel crash dump or the live operating system ,
or
.Sq raw
.Pq a raw file .
.El
.Pp
The default include path for 32-bit
.Nm
is:
.Pp
.D1 Pa %r/usr/platform/%p/lib/adb:%r/usr/lib/adb
.Pp
The default include path for 64-bit
.Nm
is:
.Pp
.D1 Pa %r/usr/platform/%p/lib/adb/%i:%r/usr/lib/adb/%i
.It Fl k
Forces kernel debugging mode.
By default,
.Nm
attempts to infer whether the object and core file operands refer to a user
executable and core dump, or to a pair of operating system crash dump files.
The
.Fl k
option forces
.Nm
to assume these files are operating system crash dump files.
If no object or core operand is specified, but the
.Fl k
option is specified,
.Nm
defaults to an object file of
.Pa /dev/ksyms
and a core file of
.Pa /dev/kmem .
Read access to
.Pa /dev/kmem
is restricted to group sys.
Write access requires ALL privileges.
.It Fl K
Load
.Xr kmdb 4D ,
stop the live running operating system kernel, and proceed to the
kmdb debugger prompt.
This option should only be used on the system console, as the subsequent
kmdb prompt appears on the system console.
.It Fl L Ar path
Sets the default path for locating debugger modules.
Modules are loaded automatically on startup or using the
.Ic ::load
dcmd.
The path is a sequence of directory names delimited by colon
.Pq \&:
characters.
The
.Fl L
library path can also contain any of the tokens shown for
.Fl I
above.
.It Fl m
Disables demand-loading of kernel module symbols.
By default,
.Nm
processes the list of loaded kernel modules and performs demand loading of
per-module symbol tables.
If the
.Fl m
option is specified,
.Nm
does not attempt to process the kernel module list or provide per-module symbol
tables.
As a result,
.Nm
modules corresponding to active kernel modules are not loaded on startup.
.It Fl M
Preloads all kernel module symbols.
By default,
.Nm
performs demand-loading for kernel module symbols: the complete symbol table
for a module is read when an address is that module's text or data section is
referenced.
With the
.Fl M
option,
.Nm
loads the complete symbol table of all kernel modules during startup.
.It Cm \(+-o Ar option
Enables the specified debugger option.
If the
.Sy +o
form of the option is used, the specified
.Ar option
is disabled.
Unless noted below, each option is off by default.
.Nm
recognizes the following
.Ar option
arguments:
.Bl -tag -width repeatlast
.It adb
Enables stricter
.Xr adb 1
compatibility.
The prompt is set to the empty string and many
.Nm
features, such as the output pager, is disabled.
.It array_mem_limit= Ns Ar limit
Sets the default limit on the number of array members that
.Ic ::print
displays.
If
.Ar limit
is the special token
.Cm none ,
all array members are displayed by default.
.It array_str_limit= Ns Ar limit
Sets the default limit on the number of characters that
.Ic ::print
attempts to display as an ASCII string when printing a char array.
If
.Ar limit
is the special token
.Cm none ,
the entire char array is displayed as a string by default.
.It autowrap
Forces output to be autowrapped at the terminal width.
When this option is enabled,
.Nm
will autowrap output, making some attempt to inject newlines at word boundaries.
This option is disabled by default.
.It follow_exec_mode= Ns Ar mode
Sets the debugger behavior for following an
.Xr exec 2
system call.
The
.Ar mode
should be one of the following named constants:
.Bl -tag -width Ds
.It Cm ask
If
.Dv stdout
is a terminal device, the debugger stops after the
.Xr exec 2
system call has returned and then prompts the user to decide whether to follow
the exec or stop.
If
.Dv stdout
is not a terminal device, the
.Cm ask
mode defaults to
.Cm stop .
.It Cm follow
The debugger follows the exec by automatically continuing the target process
and resetting all of its mappings and symbol tables based on the new
executable.
The
.Cm follow
behavior is discussed in more detail under
.Sx NOTES, Interaction with Exec ,
below.
.It Cm stop
The debugger stops following return from the exec system call.
The
.Cm stop
behavior is discussed in more detail under
.Sx NOTES, Interaction with Exec ,
below.
.El
.It follow_fork_mode= Ns Ar mode
Sets the debugger behavior for following a
.Xr fork 2 ,
.Xr fork1 2 ,
or
.Xr vfork 2
system call.
The
.Ar mode
should be one of the following named constants:
.Bl -tag -width Ds
.It Cm ask
If
.Dv stdout
is a terminal device, the debugger stops after the
.Xr fork 2
system call has returned and then prompts the user to decide whether to follow
the parent or child.
If
.Dv stdout
is not a terminal device, the
.Cm ask
mode defaults to
.Cm parent .
.It Cm parent
The debugger follows the parent process, and detaches from the child process
and sets it running.
.It Cm child
The debugger follows the child process, and detaches from the parent process
and sets it running.
.El
.It ignoreeof
The debugger does not exit when an EOF sequence
.Pq ^D
is entered at the terminal.
The
.Ic ::quit
dcmd must be used to quit.
.It nostop
Does not stop a user process when attaching to it when the
.Fl p
option is specified or when the
.Ic ::attach
or
.Ic :A
dcmds are applied.
The
.Cm nostop
behavior is described in more detail under
.Sx NOTES, Process Attach and Release ,
below.
.It pager
Enables the output pager
.Pq default .
.It repeatlast
If a NEWLINE is entered as the complete command at the terminal,
.Nm
repeats the previous command with the current value of dot.
This option is implied by
.Fl o adb .
.It showlmid
.Nm
provides support for symbol naming and identification in user applications that
make use of link maps other than
.Dv LM_ID_BASE
and
.Dv LM_ID_LDSO ,
as described in
.Sx Symbol Name Resolution ,
above.
Symbols on link maps other than
.Dv LM_ID_BASE
or
.Dv LM_ID_LDSO
is shown as LMlmid`library`symbol, where lmid is the link-map ID
in the default output radix
.Pq 16 .
The user can optionally configure
.Nm
to show the link-map ID scope of all symbols and objects, including those
associated with
.Dv LM_ID_BASE
and
.Dv LM_ID_LDSO ,
by enabling the
.Sq showlmid
option.
Built-in dcmds that deal with object file names displays link-map IDs
s according to the value of showlmid above, including
.Ic ::nm ,
.Ic ::mappings ,
.Ic $m
and
.Ic ::objects .
.El
.It Fl p Ar pid
Attaches to and stops the specified process-id.
.Nm
uses the
.Pa /proc/pid/object/a.out
file as the executable file pathname.
.It Fl P Ar prompt
Sets the command prompt.
The default prompt is
.Sq >\  .
.It Fl R Ar root
Sets root directory for pathname expansion.
By default, the root directory is derived from the pathname of the
.Nm
executable itself.
The root directory is substituted in place of the %r token during pathname
expansion.
.It Fl s Ar distance
Sets the symbol matching distance for address-to-symbol-name conversions to the
specified
.Ar distance .
By default,
.Nm
sets the distance to zero, which enables a smart-matching mode.
Each ELF symbol table entry includes a value V and size S, representing the
size of the function or data object in bytes.
In smart mode,
.Nm
matches an address A with the given symbol if A is in the range [ V, V + S ).
If any non-zero distance is specified, the same algorithm is used, but S in the
expression above is always the specified absolute distance and the symbol size
is ignored.
.It Fl S
Suppresses processing of the user's
.Pa ~/.mdbrc
file.
By default,
.Nm
reads and processes the macro file
.Pa .mdbrc
if one is present in the user's home directory, as defined by the
.Ev HOME
environment variable.
If the
.Fl S
option is present, this file is not read.
.It Fl u
Forces user debugging mode.
By default,
.Nm
attempts to infer whether the object and core file operands refer to a user
executable and core dump, or to a pair of operating system crash dump files.
The
.Fl u
option forces
.Nm
to assume these files are not operating system crash dump files.
.It Fl U
Unload
.Xr kmdb 4D
if it is loaded.
You should unload kmdb when it is not in use to release the memory used by the
kernel debugger back to the free memory available to the operating system.
.It Fl V Ar version
Sets disassembler version.
By default,
.Nm
attempts to infer the appropriate disassembler version for the debug target.
The disassembler can be set explicitly using the
.Fl V
option.
The
.Ic ::disasms
dcmd lists the available disassembler versions.
.It Fl w
Opens the specified object and core files for writing.
.It Fl W
Permit access to memory addresses that are mapped to I/O devices.
By default,
.Nm
does not allow such access because many devices do not provide hardware
protection against invalid software manipulations.
Use this option only when debugging device drivers and with caution.
.It Fl y
Sends explicit terminal initialization sequences for tty mode.
Some legacy terminal emulators require explicit initialization sequences to
switch into a tty mode.
Without this initialization sequence, terminal features such as standout mode
will not be available to
.Nm .
.El
.Sh OPERANDS
The following operands are supported:
.Bl -tag -width Ds
.It Ar object
Specifies an ELF format object file to examine.
.Nm
provides the ability to examine and edit ELF format executables
.Pq Dv ET_EXEC ,
ELF dynamic library files
.Pq Dv ET_DYN ,
ELF relocatable object files
.Pq Dv ET_REL ,
and operating system unix.X symbol table files.
.It Ar core
Specifies an ELF process core file
.Pq Dv ET_CORE ,
or an operating system crash dump vmcore.X file.
If an ELF core file operand is provided without a corresponding object file and
the core file settings have been modified to store less than the default, some
information may be unavailable.
.It Ar suffix
Specifies the numerical suffix representing a pair of operating system crash
dump files.
For example, if the suffix is
.Sq 3 ,
.Nm
infers that it should examine the files
.Sq unix.3
and
.Sq vmcore.3 .
The string of digits are not interpreted as a suffix if an actual file of the
same name is present in the current directory.
.El
.Sh USAGE
.Nm
processes all input files
.Pq including scripts, object files, core files, and raw data files
in a large file aware fashion.
See
.Xr largefile 7
for more information about the processing of large files, which are files
greater than or equal to 2 Gbytes
.Pq 2^31 bytes .
.Sh ENVIRONMENT VARIABLES
.Bl -tag -width Ev
.It Ev HISTSIZE
This variable is used to determine the maximum length of the command history
list.
If this variable is not present, the default length is 128.
.It Ev HOME
This variable is used to determine the pathname of the user's home directory,
where a
.Pa .mdbrc
file can reside.
If this variable is not present, no
.Pa .mdbrc
processing occurs.
.It Ev SHELL
This variable is used to determine the pathname of the shell used to process
shell escapes requested using the ! meta-character.
If this variable is not present,
.Pa /bin/sh
is used.
.El
.Sh FILES
.Bl -tag -width Ds -compact
.It Pa $HOME/.mdbrc
User
.Nm
initialization file.
The .mdbrc file, if present, is processed after the debug target has been
initialized, but before module auto-loading is performed or any commands have
been read from standard input.
.Pp
.It Pa /dev/kmem
Kernel virtual memory image device.
This device special file is used as the core file when examining the live
operating system.
.Pp
.It Pa /dev/ksyms
Kernel symbol table device.
This device special file is used as the object file when examining the live
operating system.
.Pp
.It Pa /proc/pid/*
Process information files that are read when examining and controlling user
processes.
.Pp
.It Pa /usr/lib/adb
.It Pa /usr/platform/platform-name/lib/adb
Default directories for macro files that are read with the
.Ic $<
and
.Ic $<<
dcmds.
platform-name is the name of the platform, derived either from information in a
core file or crash dump, or from the current machine.
.Pp
.It Pa /usr/lib/mdb
.It Pa /usr/platform/platform-name/lib/mdb
Default directories for debugger modules that are loaded using the
.Ic ::load
dcmd.
platform-name is the name of the platform, derived either from information in a
core file or crash dump, or from the current machine.
.El
.Sh EXIT STATUS
The following exit values are returned:
.Bl -tag -width Ds
.It Sy 0
Debugger completed execution successfully.
.It Sy 1
A fatal error occurred.
.It Sy 2
Invalid command line options were specified.
.El
.Sh INTERFACE STABILITY
The command line interface of
.Nm
is
.Sy Evolving .
The output of
.Nm
is
.Sy Not-An-Interface
and may change at any time.
.Sh SEE ALSO
.Xr adb 1 ,
.Xr gcore 1 ,
.Xr pgrep 1 ,
.Xr proc 1 ,
.Xr prun 1 ,
.Xr ps 1 ,
.Xr stty 1 ,
.Xr truss 1 ,
.Xr uname 1 ,
.Xr _lwp_self 2 ,
.Xr exec 2 ,
.Xr fork 2 ,
.Xr fork1 2 ,
.Xr kill 2 ,
.Xr pipe 2 ,
.Xr vfork 2 ,
.Xr dlclose 3C ,
.Xr dlopen 3C ,
.Xr signal 3C ,
.Xr thr_self 3C ,
.Xr elf 3ELF ,
.Xr signal.h 3HEAD ,
.Xr libc_db 3LIB ,
.Xr libkvm 3LIB ,
.Xr libthread 3LIB ,
.Xr kmdb 4D ,
.Xr ksyms 4D ,
.Xr mem 4D ,
.Xr core 5 ,
.Xr proc 5 ,
.Xr attributes 7 ,
.Xr largefile 7 ,
.Xr threads 7 ,
.Xr coreadm 8 ,
.Xr dumpadm 8 ,
.Xr savecore 8
.Pp
.%T Linker and Libraries Guide
.Pp
.%T Modular Debugger Guide
.Pp
.Lk https://illumos.org/books/mdb/
.Sh WARNINGS
.Ss Use of the Error Recovery Mechanism
The debugger and its dmods execute in the same address space, and thus it is
quite possible that a buggy dmod can cause
.Nm
to dump core or otherwise misbehave.
The
.Nm
resume capability, described above under
.Sx Signal Handling ,
provides a limited recovery mechanism for these situations.
However, it is not possible for
.Nm
to know definitively whether the dmod in question has corrupted only its own
state, or the debugger's global state.
Therefore a resume operation cannot be guaranteed to be safe, or to prevent a
subsequent crash of the debugger.
The safest course of action following a resume is to save any important debug
information, and then quit and restart the debugger.
.Ss Use of the Debugger to Modify the Live Operating System
The use of the debugger to modify
.Pq that is, write to
the address space of live running operating system is extremely dangerous, and
can result in a system panic in the event the user damages a kernel data
structure.
.Sh NOTES
.Ss Limitations on Examining Process Core Files
By default, text sections and read-only data are included in core files.
While ill-advised, users can configure their processes to exclude that
information from core files using
.Xr coreadm 8 .
Such core files will be missing the information necessary to interpret them; to
debug them using
.Nm ,
the object file shold be specified in addition to the core file.
The instruction set architecture of the machine running
.Nm
must match the instruction set architecture of the machine that generated the
core file.
.Ss Limitations on Examining Crash Dump Files
If a crash dump from one operating system release is examined using the dmods
from a different operating system release, changes in the kernel implementation
can prevent some dcmds or walkers from working properly.
.Nm
issues a warning message if it detects this condition.
The instruction set architecture of the machine running
.Nm
must match the instruction set architecture of the machine that generated the
crash dump.
.Ss Relationship Between 32-bit and 64-bit Debugger
.Nm
provides support for debugging both 32-bit and 64-bit programs.
Once it has examined the target and determined its data model,
.Nm
automatically re-executes the
.Nm
binary that has the same data model as the target, if necessary.
This approach simplifies the task of writing debugger modules, because the
modules that are loaded use the same data model as the primary target.
Only the 64-bit debugger can be used to debug 64-bit target programs.
The 64-bit debugger can only be used on a system that is running the 64-bit
operating environment.
.Pp
The debugger can also need to re-execute itself when debugging a 32-bit process
that execs a 64-bit process, or vice-versa.
The handling of this situation is discussed in more detail under Interaction
with Exec, below.
.Ss Interaction with Exec
When a controlled process performs a successful
.Xr exec 2 ,
the behavior of the debugger is controlled by the
.Ic ::set Fl o No follow_exec_mode
option, as described above.
If the debugger and victim process have the same data model, then the
.Cm stop
and
.Cm follow
modes determine whether
.Nm
automatically continues the target or returns to the debugger prompt following
the exec.
If the debugger and victim process have a different data model, then the
.Cm follow
behavior causes
.Nm
to automatically re-exec the
.Nm
binary with the appropriate data model and to re-attach to the process, still
stopped on return from the exec.
Not all debugger state is preserved across this re-exec.
.Pp
If a 32-bit victim process execs a 64-bit program, then
.Cm stop
returns to the command prompt, but the debugger is no longer able to examine
the process because it is now using the 64-bit data model.
To resume debugging, execute the
.Ic ::release Fl a
dcmd, quit
.Nm ,
and then execute
.Nm
.Fl p
.Ar pid
to re-attach the 64-bit debugger to the process.
.Pp
If a 64-bit victim process execs a 32-bit program, then
.Cm stop
returns to the command prompt, but the debugger only provides limited
capabilities for examining the new process.
All built-in dcmds work as advertised, but loadable dcmds do not since they do
not perform data model conversion of structures.
The user should release and re-attach the debugger to the process as described
above in order to restore full debugging capabilities.
.Ss Interaction with Job Control
If the debugger is attached to a process that is stopped by job control
.Po
that is, it stopped in response to
.Dv SIGTSTP ,
.Dv SIGTTIN ,
or
.Dv SIGTTOU
.Pc ,
the process can not be able to be set running again when it is continued by a
continue dcmd.
If the victim process is a member of the same session
.Po
that is, it shares the same controlling terminal as
.Nm
.Pc ,
.Nm
attempts to bring the associated process group to the foreground and to
continue the process with
.Dv SIGCONT
to resume it from job control stop.
When
.Nm
is detached from such a process, it restores the process group to the
background before exiting.
If the victim process is not a member of the same session,
.Nm
cannot safely bring the process group to the foreground, so it continues the
process with respect to the debugger, but the process remains stopped by job
control.
.Nm
prints a warning in this case, and the user must issue a
.Sq fg
command from the appropriate shell in order to resume the process.
.Ss Process Attach and Release
When
.Nm
attaches to a running process, the process is stopped and remains stopped until
one of the continue dcmds is applied, or the debugger quits.
If the
.Fl o No nostop
option is enabled prior to attaching the debugger to a process with
.Fl p ,
or prior to issuing an
.Ic ::attach
or
.Ic :A
command,
.Nm
attaches to the process but does not stop it.
While the process is still running, it can be inspected as usual
.Pq albeit with inconsistent results
and breakpoints or other tracing flags might be enabled.
If the
.Ic :c
or
.Ic ::cont
dcmds are executed while the process is running, the
debugger waits for the process to stop.
If no traced software events occur, the user can send an interrupt
.Pq ^C
after
.Ic :c
or
.Ic ::cont
to force the process to stop and return control to the
debugger.
.Pp
.Nm
releases the current running process
.Pq if any
when the
.Ic :R ,
.Ic ::release ,
.Ic :r ,
.Ic :run ,
.Ic $q ,
or
.Ic ::quit
dcmds are executed, or when the debugger terminates as the result of an EOF or
signal.
If the process was originally created by the debugger using
.Ic :r
or
.Ic ::run ,
it is forcibly terminated as if by
.Dv SIGKILL
when it is released.
If the process was already running prior to attaching
.Nm
to it, it is set running again when it is released.
A process can be released and left stopped and abandoned using the
.Ic ::release Fl a
option.
.Ss Symbolic Debugging Information
The
.Ic ::list ,
.Ic ::offsetof ,
.Ic ::print ,
and
.Ic ::sizeof
dcmds require that one or more load objects contain compressed symbolic
debugging information suitable for use with
.Nm .
This information is currently only available for certain kernel modules.
.Ss Developer Information
The
.%T Modular Debugger Guide
provides a more detailed description of
.Nm
features, as well as information for debugger module developers.
.Pp
The header file
.In sys/mdb_modapi.h
contains prototypes for the functions in the MDB Module API, and distributions
may provide source code for an example module in the directory
.Pa /usr/demo/mdb .
