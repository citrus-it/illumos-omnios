.\" The contents of this file are subject to the terms of the Common
.\" Development and Distribution License (the "License").  You may not use
.\" this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE or
.\" http://www.opensolaris.org/os/licensing.  See the License for the
.\" specific language governing permissions and limitations under the
.\" License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each file
.\" and include the License file at usr/src/OPENSOLARIS.LICENSE.  If
.\" applicable, add the following below this CDDL HEADER, with the fields
.\" enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\" Copyright (c) 2008, Sun Microsystems, Inc. All Rights Reserved
.\" Copyright 2022 OmniOS Community Edition (OmniOSce) Association.
.Dd March 4, 2022
.Dt PPRIV 1
.Os
.Sh NAME
.Nm ppriv
.Nd inspect or modify process privilege sets and attributes
.Sh SYNOPSIS
.Nm
.Fl e
.Op Fl f Bro +- Brc Ns Brq ADMPX
.Op Fl s Ar spec
.Ar command
.Op Ar arg Ns ...
.Nm
.Op Fl vS
.Op Fl f Bro +- Brc Ns Brq ADMPX
.Op Fl s Ar spec
.Brq pid | core
.Nm
.Fl l
.Op Fl v
.Op Ar privilege-specification
.Sh DESCRIPTION
The first invocation of the
.Nm
command runs the provided
.Ar command
specified with the privilege sets and flags modified according to the arguments
on the command line.
.Pp
The second invocation examines or changes the privilege state of running
process and core files.
.Pp
The third invocation lists the privileges defined and information about
specified privileges or privileges set specifications.
.Sh OPTIONS
The following options are supported:
.Bl -tag -width Ds
.It Fl D
Turns on privilege debugging for the processes or command supplied.
Equivalent to
.Fl f Cm +D .
.It Fl e
Interprets the remainder of the arguments as a command line and runs the
command line with specified privilege attributes and sets.
.It Fl f Bro +- Brc Ns Brq ADMPX
Set or unset process flags.
With
.Sq \&+
the listed flags are set, and with
.Sq \&-
the flags are unset.
Available flags are:
.Bl -tag -width 4n -offset 4n
.It Sy A
PRIV_EXEC_AUTH
.It Sy D
PRIV_DEBUG
.It Sy M
NET_MAC_AWARE, NET_MAC_AWARE_INHERIT
.It Sy P
PRIV_PFEXEC
.It Sy X
PRIV_XPOLICY
.El
.Pp
See
.Xr setpflags 2
for more information on these flags.
.It Fl l
Lists all currently defined privileges on
.Dv stdout .
.It Fl M
When a system is configured with Trusted Extensions, this option turns on the
.Sy NET_MAC_AWARE
and
.Sy NET_MAC_AWARE_INHERIT
process attributes.
Equivalent to
.Fl f Cm +M .
.Pp
A process with these attributes and the
.Sy net_mac_aware
privilege can communicate with lower-level remote peers.
.It Fl N
Turns off privilege debugging for the processes or command supplied.
Equivalent to
.Fl f Cm -N
.It Fl P
Equivalent to
.Fl f Cm +P .
.It Fl s Ar spec
Modifies a process's privilege sets according to
.Ar spec ,
a specification with the format
.Sm off
.Op Cm AEILP
.Op Cm +-=
.Ar privsetspec ,
.Sm on
containing no spaces, where:
.Bl -tag -width Ds
.It Cm AEILP
Indicates one or more letters indicating which privilege sets to change.
These are case insensitive, for example, either
.Cm a
or
.Cm A
indicates all privilege sets.
.It Cm +-=
Indicates a modifier to respectively add
.Pq Cm \&+ ,
remove
.Pq Cm \&- ,
or assign
.Pq Cm \&=
the listed privileges to the specified set(s)
in
.Ar privsetspec .
.It Ar privsetspec
Indicates a comma-separated privilege set specification
.Pq priv1,priv2, and so on ,
as described in
.Xr priv_str_to_set 3C .
Modifying the same set with multiple
.Fl s
options is possible as long as there is either precisely one assignment to an
individual set or any number of additions and removals.
That is, assignment and addition or removal for one set are mutually exclusive.
.El
.It Fl S
Short.
Reports the shortest possible output strings for sets.
The default is portable output.
See
.Xr priv_str_to_set 3C .
.It Fl v
Verbose.
Reports privilege sets using privilege names.
.It Fl x
Equivalent to
.Fl f Cm +X .
.El
.Sh USAGE
The
.Nm
utility examines processes and core files and prints or changes their privilege
sets.
.Pp
.Nm
can run commands with privilege debugging on or off or with fewer privileges
than the invoking process.
.Pp
When executing a sub process, the only sets that can be modified are
.Sy L
and
.Sy I .
Privileges can only be removed from
.Sy L
and
.Sy I
as
.Nm
starts with P=E=I.
.Pp
.Nm
can also be used to remove privileges from processes or to convey privileges to
other processes.
In order to control a process, the effective set of the
.Nm
utility must be a super set of the controlled process's
.Sy E ,
.Sy I ,
and
.Sy P .
The utility's limit set must be a super set of the target's limit set.
If the target's process uids do not match, the
.Brq PRIV_PROC_OWNER
privilege must be asserted in the utility's effective set.
If the controlled processes have any uid with the value
.Sy 0 ,
more restrictions might exist.
See
.Xr privileges 7 .
.Sh FILES
.Bl -tag -width Ds
.It Pa /proc/*
Process files
.It Pa /etc/name_to_sysnum
system call name to number mapping
.El
.Sh EXIT STATUS
The following exit values are returned:
.Bl -tag -width Ds
.It Sy 0
Successful operation.
.It non-zero
An error has occurred.
.El
.Sh EXAMPLES
.Sy Example 1 No Obtaining the Process Privileges of the Current Shell
.Pp
The following example obtains the process privileges of the current shell:
.Bd -literal -offset 4n
$ ppriv $$
387:   -sh flags = <none>
        E: basic
        I: basic
        P: basic
        L: all
.Ed
.Pp
.Sy Example 2
Removing a Privilege From Your Shell's Inheritable and Effective Set
.Pp
The following example removes a privilege from your shell's inheritable and
effective set.
.Bd -literal -offset 4n
$ ppriv -s EI-proc_session $$
.Ed
.Pp
The subprocess can still inspect the parent shell but it can no longer
influence the parent because the parent has more privileges in its Permitted
set than the
.Nm
child process:
.Bd -literal -offset 4n
$ truss -p $$
truss: permission denied: 387
$ ppriv $$
387:   -sh
flags = <none>
        E: basic,!proc_session
        I: basic,!proc_session
        P: basic
        L: all
.Ed
.Pp
.Sy Example 3 No Running a Process with Privilege Debugging
.Pp
The following example runs a process with privilege debugging:
.Bd -literal -offset 4n
$ ppriv -e -D cat /etc/shadow
cat[23505]: missing privilege "file_dac_read"
    (euid = 100, syscall = 225) needed at zfs_zaccess+0x176
cat: cannot open /etc/shadow: Permission denied
.Ed
.Pp
The privilege debugging error messages are sent to the controlling terminal of
the current process.
The needed at address specification is an artifact of the kernel implementation
and it can be changed at any time after a software update.
.Pp
The system call number can be mapped to a system call using
.Pa /etc/name_to_sysnum .
.Pp
.Sy Example 4 No Listing the Privileges Available in the Current Zone
.Pp
The following example lists the privileges available in the current zone
.Po
see
.Xr zones 7
.Pc .
When run in the global zone, all defined privileges are listed.
.Bd -literal -offset 4n
$ ppriv -l zone
\&... listing of all privileges elided ...
.Ed
.Pp
.Sy Example 5 No Examining a Privilege Aware Process
.Pp
The following example examines a privilege aware process:
.Bd -literal -offset 4n
$ ppriv -S `pgrep rpcbind`
928:	  /usr/sbin/rpcbind
flags = PRIV_AWARE
        E: net_privaddr,proc_fork,sys_nfs
        I: none
        P: net_privaddr,proc_fork,sys_nfs
        L: none
.Ed
.Pp
See
.Xr setpflags 2
for explanations of the flags.
.Sh INTERFACE STABILITY
The command line interface of
.Nm
is
.Sy Committed .
The output of
.Nm
is
.Sy Not-An-Interface
and may change at any time.
.Sh SEE ALSO
.Xr gcore 1 ,
.Xr truss 1 ,
.Xr setpflags 2 ,
.Xr priv_str_to_set 3C ,
.Xr proc 5 ,
.Xr attributes 7 ,
.Xr privileges 7 ,
.Xr zones 7
