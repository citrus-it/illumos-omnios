.\"
.\" This file and its contents are supplied under the terms of the
.\" Common Development and Distribution License ("CDDL"), version 1.0.
.\" You may only use this file in accordance with the terms of version
.\" 1.0 of the CDDL.
.\"
.\" A full copy of the text of the CDDL should have accompanied this
.\" source.  A copy of the CDDL is also available via the Internet at
.\" http://www.illumos.org/license/CDDL.
.\"
.\" Copyright 2023 Oxide Computer Company
.\"
.Dd February 6, 2023
.Dt IPCC 4I
.Os
.Sh NAME
.Nm ipcc
.Nd inter-processor communications channel
.Sh SYNOPSIS
.In sys/ipcc.h
.Sh DESCRIPTION
The
.Nm
driver supports a set of
.Xr ioctl 2
requests for communicating with the service processor
.Pq SP
via the inter-processor communications channel
.Pq IPCC .
Basic to these
.Xr ioctl 2
requests are the definitions in
.In sys/ipcc.h
which is located under
.Pa /usr/platform/oxide/include .
.Sh IOCTLS
The following
.Xr ioctl 2
requests retrieve
.Nm
data and/or communicate with the service processor.
These ioctls can be issued against the pseudo-device
.Pa /dev/ipcc .
.Bl -tag -width 1n
.It Dv IPCC_GET_VERSION
This request returns the current kernel interface version for the
.Nm
module.
The interface version is the return value of the
.Xr ioctl 2
call; the argument is ignored.
.It Dv IPCC_STATUS
The argument is a pointer to a
.Vt ipcc_status_t
structure
.Pq described below .
On successful return, this structure will have been populated with the current
values of the service processor's status and startup-options registers.
.Bd -literal -offset 2n
typedef struct ipcc_status {
        uint64_t        is_status;
        uint64_t        is_startup;
} ipcc_status_t;
.Ed
.Pp
The value within
.Fa is_status
is generally transient and will be automatically processed by the kernel to
ensure protocol synchronisation and alert delivery.
.Pp
The bits within
.Fa is_startup
control various platform startup options.
Note that these options are only examined by the kernel at system boot so the
value returned by the SP after that may not reflect the options with which the
current system was booted.
The currently defined bits are:
.Bl -tag -width 10n -offset 2n
.It bit 0
Attempt to load the phase 2 image via the IPCC.
.It bit 1
Set
.Dv kbm_debug
to true.
.It bit 2
Set
.Dv bootrd_debug
to true.
.It bit 3
Set
.Dv prom_debug
to true.
.It bit 4
Load
.Xr kmdb 1 .
.It bit 5
Load
.Xr kmdb 1
and enter it at boot.
.It bit 6
Skip phase 2 and start directly using the provided stage1 image for the root
filesystem.
.It bit 7
Attempt to load the phase 2 image via the network.
.It bit 8
Boot in verbose mode.
.El
.It Dv IPCC_IDENT
The argument is a pointer to a
.Vt ipcc_ident_t
structure
.Pq described below .
On successful return, this structure will have been populated with parts of the
system's Vital Product Data
.Pq VPD .
The
.Fa ii_model
and
.Fa ii_serial
fields are encoded as UTF-8
.Pq although this is often the 7-bit ASCII subset of UTF-8
and will be NUL terminated.
.Bd -literal -offset 2n
#define IDENT_STRING_SIZE	51

typedef struct ipcc_ident {
    uint8_t         ii_model[IDENT_STRING_SIZE];
    uint8_t         ii_serial[IDENT_STRING_SIZE];
    uint32_t        ii_rev;
} ipcc_ident_t;
.Ed
.It Dv IPCC_MACS
The argument is a pointer to a
.Vt ipcc_mac_t
structure
.Pq described below .
On successful return, this structure will have been populated with information
that defines the MAC addresses which are available for use by the host OS for
a particular purpose.
.Bd -literal -offset 2n
#define ETHERADDRL		6 /* from <sys/ethernet.h> */

/* Values for im_group, see below */
#define IPCC_MAC_GROUP_ALL              0
#define IPCC_MAC_GROUP_NIC              1
#define IPCC_MAC_GROUP_BOOTSTRAP        2

typedef struct ipcc_mac {
    uint8_t         im_group;
    uint16_t        im_count;
    uint8_t         im_base[ETHERADDRL];
    uint8_t         im_stride;
} ipcc_mac_t;
.Ed
.Pp
Before calling, the following fields must be set to appropriate values:
.Bl -tag -width 10n -offset 2n
.It Fa im_group
The MAC address group being requested.
.El
.Pp
Possible values for
.Fa im_group
are:
.Bl -tag -width 10n -offset 2n
.It Dv IPCC_MAC_GROUP_ALL
Return all of the MAC addresses that the SP provides to the host.
.It Dv IPCC_MAC_GROUP_NIC
Return the subset of MAC addresses that are reserved for the host NICs.
.It Dv IPCC_MAC_GROUP_BOOTSTRAP
Return the subset of MAC addresses that are reserved for bootstrapping.
.El
.Pp
On successful return, the
.Fa im_count ,
.Fa im_base
and
.Fa im_stride
fields will have been updated to convey information about the requested
addresses.
.It Dv IPCC_KEYLOOKUP
This request is a generic key/value lookup mechanism where the SP can be asked
for the current value that corresponds to a specified lookup key.
Keys are just
.Vt uint8_t
values used to select the desired value.
This happens to readily map directly into an enum in the SP once decoded with
hubpack.
The argument is a pointer to an
.Vt ipcc_keylookup_t
structure.
.Bd -literal -offset 2n
/* ik_result values, see below */
#define IPCC_KEYLOOKUP_SUCCESS          0
#define IPCC_KEYLOOKUP_UNKNOWN_KEY      1
#define IPCC_KEYLOOKUP_NO_VALUE         2
#define IPCC_KEYLOOKUP_BUFFER_TOO_SMALL 3

typedef struct ipcc_keylookup {
    uint8_t         ik_key;	/* input, requested key */
    uint16_t        ik_buflen;	/* input, buffer size */
    uint8_t         ik_result;	/* output, result */
    uint16_t        ik_datalen;	/* output, response size */
    uint8_t         *ik_buf;	/* i/o, response buffer */
} ipcc_keylookup_t;
.Ed
.Pp
Before calling, the following fields must be set to appropriate values:
.Bl -tag -width 10n -offset 2n
.It Fa ik_key
The key which is to be requested.
.It Fa ik_buf
A pointer to a buffer which will receive the result.
.It Fa ik_buflen
The size of the buffer pointer to by
.Fa ik_buf
.El
.Pp
The set of valid values for
.Fa ik_key
is defined by the SP; the kernel does not filter requests.
However, a key value of 0
.Pq zero
always corresponds to a
.Dq ping
key to which the SP will return a 4-byte response containing
.Dq pong ,
subject to the provided buffer being large enough to receive this value.
.Pp
On successful return, the kernel will have updated the
.Fa ik_result
and
.Fa ik_datalen
fields to reflect the result of the operation, as provided by the SP, and the
amount of response data which has been placed in
.Fa ik_buf .
.Pp
Possible values for
.Fa ik_result
are:
.Bl -tag -width 10n -offset 2n
.It Dv IPCC_KEYLOOKUP_SUCCESS
the lookup was successful;
.It Dv IPCC_KEYLOOKUP_UNKNOWN_KEY
the specified key is invalid
.Pq not known to the SP ;
.It Dv IPCC_KEYLOOKUP_NO_VALUE
The key is valid but there is no current value;
.It Dv IPCC_KEYLOOKUP_BUFFER_TOO_SMALL
The provided buffer is too small to contain the value for the requested key.
.El
.It Dv IPCC_ROT
This is a placeholder that will be expanded later.
.El
.Sh RETURN VALUES
.Bl -tag -offset 2n -width indent
.It For Dv IPCC_VERSION :
On success, the return value is the current version of the kernel
.Nm
interface.
Otherwise,
.Sy -1
is returned and
.Va errno
is set to indicate the error.
.It For all other requests:
Upon successful completion, the value returned is
.Sy 0 .
Otherwise,
.Sy -1
is returned and
.Va errno
is set to indicate the error.
.El
.Sh ERRORS
These ioctls are subject to the errors described in
.Xr ioctl 2 .
In addition to those errors, the following
.Nm Ns -specific errors may occur.
.Bl -tag -offset indent -width 10n
.It Er EINTR
The SP interrupt line was raised and something went wrong while processing that.
.It Er ETIMEDOUT
Despite a number of retries, communication with the SP was ultimately
unsuccessful.
.El
.\" command-specific
.Pp
The following command-specific errors may also occur:
.Bl -item
.It
.Dv IPCC_MACS
.Bl -tag -offset indent -width 10n
.It Er ENOSPC
Unable to allocate MAC addresses for the requested group.
There are either insufficient MAC addresses provided by the SP, or the
requirements for this group
.Pq such as stride width
cannot be met.
.El
.It
.Dv IPCC_KEYLOOKUP
.Bl -tag -offset indent -width 10n
.It Er EIO
An invalid reply was received from the SP.
.It Er EOVERFLOW
Too much data received in response to a lookup.
This is generally a protocol error; the SP should usually indicate that the
supplied buffer is too small via setting
.Fa ik_result
to
.Dv IPCC_KEYLOOKUP_BUFFER_TOO_SMALL
as described above.
.El
.El
.Sh INTERFACE STABILITY
.Sy Uncommitted
.Sh PLATFORM
This interface is only available on Oxide hardware platforms.
.Sh SEE ALSO
.Xr kmdb 1 ,
.Xr ioctl 2
